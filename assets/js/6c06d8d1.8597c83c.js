(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{100:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),o=(a(0),a(160)),i={title:"Pravega Sensor Collector"},l={unversionedId:"sdp/edge/pravega-sensor-collector",id:"sdp/edge/pravega-sensor-collector",isDocsHomePage:!1,title:"Pravega Sensor Collector",description:"Pravega Sensor Collector can continuously collect high-resolution samples without interruption, even if the network connection to the Pravega server is unavailable for long periods. For instance, there may be long periods between cities where there is no network access in a connected train use case. During this time, the Pravega Sensor Collector stores collected sensor data on a local disk and periodically attempts to reconnect to the Pravega server. It stores this sensor data in local SQLite database files. When transferring samples from a SQLite database file to Pravega, it coordinates a SQLite transaction and a Pravega transaction in a two-phase commit protocol, described in detail in the Recovery from Failures section below. This technique allows it to guarantee that all samples are sent in-order, without gaps, and without duplicates, even in the presence of computer, network, and power failures (i.e. exactly-once consistency). To learn more about exactly-once consistency, refer to the blog here.",source:"@site/docs/sdp/edge/pravega-sensor-collector.md",slug:"/sdp/edge/pravega-sensor-collector",permalink:"/docs/docs/sdp/edge/pravega-sensor-collector",editUrl:null,version:"current",sidebar:"mainSidebar",previous:{title:"Solution Architecture",permalink:"/docs/docs/sdp/edge/solution-architecture"},next:{title:"Pravega Flink Tools",permalink:"/docs/docs/sdp/edge/pravega-flink-tools"}},s=[{value:"Install Pravega Sensor Collector",id:"install-pravega-sensor-collector",children:[{value:"Install the Service",id:"install-the-service",children:[]},{value:"Configure Keycloak Credentials",id:"configure-keycloak-credentials",children:[]},{value:"Using a Private TLS Certificate Authority",id:"using-a-private-tls-certificate-authority",children:[]},{value:"Update Hosts File",id:"update-hosts-file",children:[]},{value:"Maintain the Service",id:"maintain-the-service",children:[]}]},{value:"Write Sample Events",id:"write-sample-events",children:[]},{value:"How to Configure",id:"how-to-configure",children:[]},{value:"Data File Ingestion",id:"data-file-ingestion",children:[{value:"Overview",id:"overview",children:[]},{value:"Supported File Formats",id:"supported-file-formats",children:[]}]},{value:"Adding Additional Devices",id:"adding-additional-devices",children:[]},{value:"Build the Installation Archive",id:"build-the-installation-archive",children:[]},{value:"See Also",id:"see-also",children:[]},{value:"About",id:"about",children:[]}],c={toc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Pravega Sensor Collector can continuously collect high-resolution samples without interruption, even if the network connection to the Pravega server is unavailable for long periods. For instance, there may be long periods between cities where there is no network access in a connected train use case. During this time, the Pravega Sensor Collector stores collected sensor data on a local disk and periodically attempts to reconnect to the Pravega server. It stores this sensor data in local SQLite database files. When transferring samples from a SQLite database file to Pravega, it coordinates a SQLite transaction and a Pravega transaction in a two-phase commit protocol, described in detail in the Recovery from Failures section below. This technique allows it to guarantee that all samples are sent in-order, without gaps, and without duplicates, even in the presence of computer, network, and power failures (i.e. exactly-once consistency). To learn more about exactly-once consistency, refer to the blog here."),Object(o.b)("p",null,"Pravega Sensor Collector is designed to collect samples at a rate of up to 1000 samples per second (1 kHz) or even higher depending on the sensor. This makes it possible, for instance, to measure high-frequency vibrations from accelerometers. It batches multiple samples into larger events that are periodically sent to Pravega. The batch size is configurable to allow you to tune the trade-off between latency and throughput that is appropriate for your use case. For the demonstration in this blog post, we\u2019ll use a sample rate of 1000 samples per second and a batch size of 1000 samples per event, leading to one event per second."),Object(o.b)("p",null,"Pravega Sensor Collector is a Java application. It has a plug-in architecture to allow Java developers to easily add drivers for different types of sensors or transform the sensor data in different ways. It currently provides drivers for the following devices:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"ST Micro lng2dm 3-axis Femto accelerometer, directly connected via I2C"),Object(o.b)("li",{parentName:"ul"},"Linux network interface card (NIC) statistics (byte counters, packet counters, error counters, etc.)"),Object(o.b)("li",{parentName:"ul"},"Generic CSV file import")),Object(o.b)("p",null,"Pravega Sensor Collector is 100% open source and community-driven. The source code is available on ",Object(o.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-sensor-collector"},"GitHub"),"."),Object(o.b)("h2",{id:"install-pravega-sensor-collector"},"Install Pravega Sensor Collector"),Object(o.b)("p",null,"If you do not have the installation archive ",Object(o.b)("inlineCode",{parentName:"p"},"pravega-sensor-collector-*.tgz"),", see ",Object(o.b)("a",{parentName:"p",href:"#build-the-installation-archive"},"Building the Installation Archive"),"."),Object(o.b)("h3",{id:"install-the-service"},"Install the Service"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The only prerequisite on the target system is Java 8 JRE.\nOn Ubuntu, this can be installed with:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\nsudo apt-get install openjdk-8-jre\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Copy the installation archive to the target system in ",Object(o.b)("inlineCode",{parentName:"p"},"/tmp"),"."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"edge@edge1:~/desdp$\nscp pravega-sensor-collector-*.tgz admin@gw1:/tmp\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Extract the archive."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\nsudo mkdir -p /opt/pravega-sensor-collector\nsudo tar -C /opt/pravega-sensor-collector --strip-components 1 \\\n   -xzvf /tmp/pravega-sensor-collector-*.tgz\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create the configuration file, starting from a sample configuration file."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\ncp /opt/pravega-sensor-collector/conf/env-sample-network-standalone.sh \\\n   /opt/pravega-sensor-collector/conf/env-local.sh\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Edit the configuration file ",Object(o.b)("inlineCode",{parentName:"p"},"/opt/pravega-sensor-collector/conf/env-local.sh"),"."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\nsudo nano /opt/pravega-sensor-collector/conf/env-local.sh\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"At a minimum, you will need to change the following fields:"),Object(o.b)("ol",{parentName:"li"},Object(o.b)("li",{parentName:"ol"},"PRAVEGA_SENSOR_COLLECTOR_ACCEL1_PRAVEGA_CONTROLLER_URI: This should have the value ",Object(o.b)("inlineCode",{parentName:"li"},"tls://pravega-controller.${sdp_domain_name}:443"),", replacing ",Object(o.b)("inlineCode",{parentName:"li"},"${sdp_domain_name}")," with the corresponding value in env.yaml."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Install and start as a Systemd service."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\nsudo /opt/pravega-sensor-collector/bin/install-service.sh\n")))),Object(o.b)("h3",{id:"configure-keycloak-credentials"},"Configure Keycloak Credentials"),Object(o.b)("p",null,"Keycloak is used to authenticate to Pravega."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the command below on the first SDP host to obtain the Keycloak credentials, which is a JSON object."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"edge@edge1:~/desdp$\n~/desdp/site-config/scripts/get-keycloak.sh\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"On the target, copy the Keycloak credentials to the file /opt/pravega-sensor-collector/conf/keycloak.json."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\nsudo nano /opt/pravega-sensor-collector/conf/keycloak.json\n")))),Object(o.b)("h3",{id:"using-a-private-tls-certificate-authority"},"Using a Private TLS Certificate Authority"),Object(o.b)("p",null,"If the TLS Certificate Authority (CA) used by SDP is not trusted by a well-known public CA, such as Let's Encrypt, you must import the CA certificate."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Copy the CA certificate to the target system."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"edge@edge1:~/desdp$\nscp ~/desdp/certs/* admin@gw:\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"On the target system, add the CA certificate to the operating system."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\nsudo /opt/pravega-sensor-collector/bin/import-ca-certificate.sh ~/*.crt\n")))),Object(o.b)("h3",{id:"update-hosts-file"},"Update Hosts File"),Object(o.b)("p",null,"If DNS is not configured throughout your network, you may need to edit the /etc/hosts file manually as described in this section."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"On the first SDP host, run the following commands to obtain the correct IP addresses for the required FQDNs."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"edge@edge1:~/desdp$\nexport SDP_DOMAIN=sdp.sdp-demo.org\n~/desdp/site-config/scripts/get-ip-addresses.sh\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Ensure that the previous command returned an IP address for each host name. For example:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"10.42.0.10 keycloak.sdp.cluster1.sdp-demo.org\n10.42.0.10 pravega-controller.sdp.cluster1.sdp-demo.org\n10.42.0.12 nautilus-pravega-segment-store-0.pravega.sdp.cluster1.sdp-demo.org\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"On the target device, add the output from the previous command to the end of the file /etc/hosts."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\nsudo nano /etc/hosts\n")))),Object(o.b)("h3",{id:"maintain-the-service"},"Maintain the Service"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Restart the service."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\nsudo systemctl restart pravega-sensor-collector.service\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"View the status of the service."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\nsudo systemctl status pravega-sensor-collector.service\nsudo journalctl -u pravega-sensor-collector.service -n 1000\n")))),Object(o.b)("h2",{id:"write-sample-events"},"Write Sample Events"),Object(o.b)("p",null,"If using the CSV file driver, you can simulate the functionality of it by using the procedure in this section."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"On the target device, create the file named /opt/dw/staging/Accelerometer.0000000001.tmp."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\ncd /opt/dw/staging\nsudo nano Accelerometer.0000000001.tmp\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Copy and paste the following contents, then save and exit:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},'"T","X","Y","Z"\n"2020-08-19 19:35:44.029","0.458949","9.637929","0.611932"\n"2020-08-19 19:35:44.031","0.458949","9.484945","0.611932"\n"2020-08-19 19:35:44.033","0.458949","9.637929","0.611932"\n"2020-08-19 19:35:44.035","0.611932","9.484945","0.611932"\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Rename the file to have a .csv extension. (This must be an atomic operation.)"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"admin@gw1:~$\nsudo mv Accelerometer.0000000001.tmp Accelerometer.0000000001.csv\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Within 2 minutes, on the SDP host, you should see the sample events written to the directory ",Object(o.b)("inlineCode",{parentName:"p"},"/desdp/lts/edge-data-project-pvc-*/streaming-data-platform/$(hostname)/sensors-parquet/"),"."))),Object(o.b)("h2",{id:"how-to-configure"},"How to Configure"),Object(o.b)("p",null,"Pravega Sensor Collector is conveniently configured using only environment variables.\nThis avoids the need to manage site-specific configuration files and allows a simple shell script\nto be used to customize the configuration.\nAll environment variables and properties begin with the prefix PRAVEGA_SENSOR_COLLECTOR."),Object(o.b)("p",null,"For convenience when debugging in an IDE, configuration values can also be specified in a properties file.\nTo use a properties file, you must set the environment variable PRAVEGA_SENSOR_COLLECTOR_PROPERTIES_FILE\nto the path of the properties file."),Object(o.b)("p",null,"For a list of commonly-used configuration values, see the\n",Object(o.b)("a",{parentName:"p",href:"%5Bpravega-sensor-collector/src/main/dist/conf%5D(https://github.com/pravega/pravega-sensor-collector/tree/master/pravega-sensor-collector/src/main/dist/conf)"},"sample environment files"),"."),Object(o.b)("h2",{id:"data-file-ingestion"},"Data File Ingestion"),Object(o.b)("h3",{id:"overview"},"Overview"),Object(o.b)("p",null,"Pravega Sensor Collector can be configured to read data from files and write the data to Pravega."),Object(o.b)("p",null,"Periodically, new files that match the file name pattern in LOG_FILE_INGEST_FILE_SPEC will be identified and ingested.\nThe names of files can be in any format.\nWhen multiple files match the file name pattern, the files will be ingested in alphabetical order.\nFor this reason, it is important that the file names are generated in alphabetical order.\nThis can be done by using a zero-padded counter (e.g. 0000000001.csv, 0000000002.csv, ...)\nor a timestamp (2020-07-29-16-00-02.123.csv)."),Object(o.b)("p",null,'It is assumed that files matching the pattern are immediately readable in their entirety.\nFor this reason, it is critical that ingested files are created atomically.\nThis can be accomplished by writing to a file with a ".tmp" extension and then renaming it\nto have a ".csv" extension after the file has been written in its entirety.'),Object(o.b)("p",null,"After being durably saved to the Pravega stream, the files will be deleted.\nThis can be disabled by setting LOG_FILE_INGEST_DELETE_COMPLETED_FILES to false."),Object(o.b)("p",null,"Each instance of Pravega Sensor Collector will have a unique writer ID.\nThe writer ID will be a UUID that is generated the first time the instance starts.\nThe writer ID will be persisted to a local SQLite database file and subsequent executions will use the same writer ID."),Object(o.b)("p",null,"The SQLite database stores the writer ID and the list of files being ingested.\nSQL transactions are used to ensure database consistency even in the event of failures."),Object(o.b)("p",null,"CSV files are deleted only after flushing events to Pravega."),Object(o.b)("p",null,"Pravega Sensor Collector is installed as a Linux systemd service.\nSystemd will start the service when the system boots up and it will restart the service if it fails."),Object(o.b)("h3",{id:"supported-file-formats"},"Supported File Formats"),Object(o.b)("h4",{id:"csv"},"CSV"),Object(o.b)("p",null,"CSV files must have exactly one header. There are no other restrictions on the CSV file.\nData from multiple rows will be combined to efficiently produce events in JSON format.\nWhen possible, integers and floating point values will be converted to their corresponding JSON data types."),Object(o.b)("p",null,"Each JSON object may have additional static fields.\nThese can be defined in the parameter LOG_FILE_INGEST_EVENT_TEMPLATE which accepts a JSON object."),Object(o.b)("h2",{id:"adding-additional-devices"},"Adding Additional Devices"),Object(o.b)("p",null,"To add support for additional types of devices, you should create a subclass of ",Object(o.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-sensor-collector/blob/master/pravega-sensor-collector/src/main/java/io/pravega/sensor/collector/simple/SimpleDeviceDriver.java"},"SimpleDeviceDriver.java")," and implement the methods ",Object(o.b)("inlineCode",{parentName:"p"},"readRawData"),", ",Object(o.b)("inlineCode",{parentName:"p"},"createSamples"),", ",Object(o.b)("inlineCode",{parentName:"p"},"decodeRawDataToSamples"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"serializeSamples"),". Refer to the implementation of ",Object(o.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-sensor-collector/blob/master/pravega-sensor-collector/src/main/java/io/pravega/sensor/collector/network/NetworkDriver.java"},"NetworkDriver.java")," as a guide."),Object(o.b)("h2",{id:"build-the-installation-archive"},"Build the Installation Archive"),Object(o.b)("p",null,"This must be executed on a build host that has Internet access.\nThis will download all dependencies and create a single archive that can be copied to an offline system."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"On the build host, build the installation archive."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-shell"},"user@build-host:~$\ngit clone https://github.com/pravega/pravega-sensor-collector\ncd pravega-sensor-collector\nscripts/build-installer.sh\n")),Object(o.b)("p",{parentName:"li"},"This will create the installation archive\n",Object(o.b)("inlineCode",{parentName:"p"},"pravega-sensor-collector/build/distributions/pravega-sensor-collector-${APP_VERSION}.tgz"),"."))),Object(o.b)("h2",{id:"see-also"},"See Also"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://github.com/pravega/pravega-sensor-collector"},"https://github.com/pravega/pravega-sensor-collector")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://www.pravega.io/"},"https://www.pravega.io/"))),Object(o.b)("h2",{id:"about"},"About"),Object(o.b)("p",null,"Pravega Sensor Collector is 100% open source and community-driven. All components are available\nunder ",Object(o.b)("a",{parentName:"p",href:"https://www.apache.org/licenses/LICENSE-2.0.html"},"Apache 2 License")," on GitHub."))}p.isMDXComponent=!0},160:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(a),h=n,m=b["".concat(i,".").concat(h)]||b[h]||d[h]||o;return a?r.a.createElement(m,l(l({ref:t},c),{},{components:a})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);