(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{102:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),i=(n(0),n(147)),o=n(152),c=n(156),l={title:"Getting Started"},s={unversionedId:"flink-connectors/getting-started",id:"flink-connectors/getting-started",isDocsHomePage:!1,title:"Getting Started",description:"\x3c!--",source:"@site/docs/flink-connectors/getting-started.md",slug:"/flink-connectors/getting-started",permalink:"/docs/flink-connectors/getting-started",editUrl:"https://github.com/claudiofahey/flink-connectors/edit/docusaurus/documentation/src/docs/getting-started.md",version:"current",sidebar:"mainSidebar",previous:{title:"Overview",permalink:"/docs/flink-connectors/index"},next:{title:"Quick Start",permalink:"/docs/flink-connectors/quickstart"}},p=[{value:"Features &amp; Highlights",id:"features--highlights",children:[]},{value:"Building Connectors",id:"building-connectors",children:[{value:"Customizing the Build",id:"customizing-the-build",children:[]}]},{value:"Setting up your IDE",id:"setting-up-your-ide",children:[]},{value:"Releases",id:"releases",children:[]},{value:"Support",id:"support",children:[]},{value:"Samples",id:"samples",children:[]}],b={toc:p};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://travis-ci.org/pravega/flink-connectors"},Object(i.b)("img",{parentName:"a",src:"https://travis-ci.org/pravega/flink-connectors.svg?branch=master",alt:"Build Status"}))),Object(i.b)("p",null,"This repository implements  connectors to read and write ",Object(i.b)("a",{parentName:"p",href:"http://pravega.io/"},"Pravega")," Streams with ",Object(i.b)("a",{parentName:"p",href:"http://flink.apache.org/"},"Apache Flink")," stream processing framework."),Object(i.b)(c.a,{feature:"nautilus",mdxType:"IfHaveFeature"},Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Streaming Data Platform")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Users of Streaming Data Platform should follow ",Object(i.b)("a",{parentName:"p",href:"/sdp/analytics/flink/getting-started"},"Getting Started with Flink on SDP"),".")))),Object(i.b)("p",null,"The connectors can be used to build end-to-end stream processing pipelines (see ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-samples"},"Samples"),") that use Pravega as the stream storage and message bus, and Apache Flink for computation over the streams."),Object(i.b)(o.a,{toc:p,mdxType:"TOCInline"}),Object(i.b)("h2",{id:"features--highlights"},"Features & Highlights"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Exactly-once processing guarantees")," for both Reader and Writer, supporting ",Object(i.b)("strong",{parentName:"p"},"end-to-end exactly-once processing pipelines"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Seamless integration with Flink's checkpoints and savepoints.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Parallel Readers and Writers supporting high throughput and low latency processing.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Table API support to access Pravega Streams for both ",Object(i.b)("strong",{parentName:"p"},"Batch")," and ",Object(i.b)("strong",{parentName:"p"},"Streaming")," use case."))),Object(i.b)("h2",{id:"building-connectors"},"Building Connectors"),Object(i.b)("p",null,"Building the connectors from the source is only necessary when we want to use or contribute to the latest (",Object(i.b)("em",{parentName:"p"},"unreleased"),") version of the Pravega Flink connectors."),Object(i.b)("p",null,"The connector project is linked to a specific version of Pravega, based on a ",Object(i.b)("a",{parentName:"p",href:"https://git-scm.com/book/en/v2/Git-Tools-Submodules"},"git submodule")," pointing to a commit-id. By default the sub-module option is disabled and the build step will make use of the Pravega version defined in the ",Object(i.b)("inlineCode",{parentName:"p"},"gradle.properties")," file. You could override this option by enabling ",Object(i.b)("inlineCode",{parentName:"p"},"usePravegaVersionSubModule")," flag in ",Object(i.b)("inlineCode",{parentName:"p"},"gradle.properties")," to ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"."),Object(i.b)("p",null,"Checkout the source code repository by following below steps:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"git clone --recursive https://github.com/pravega/flink-connectors.git\n")),Object(i.b)("p",null,"After cloning the repository, the project can be built by running the below command in the project root directory ",Object(i.b)("inlineCode",{parentName:"p"},"flink-connectors"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"./gradlew clean build\n")),Object(i.b)("p",null,"To install the artifacts in the local maven repository cache ",Object(i.b)("inlineCode",{parentName:"p"},"~/.m2/repository"),", run the following command:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"./gradlew clean install\n")),Object(i.b)("h3",{id:"customizing-the-build"},"Customizing the Build"),Object(i.b)("h4",{id:"building-against-a-custom-flink-version"},"Building against a custom Flink version"),Object(i.b)("p",null,"We can check and change the Flink version that Pravega builds against via the ",Object(i.b)("inlineCode",{parentName:"p"},"flinkVersion")," variable in the ",Object(i.b)("inlineCode",{parentName:"p"},"gradle.properties")," file."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note"),": Only Flink versions that are compatible with the latest connector code can be chosen."),Object(i.b)("h4",{id:"building-against-another-scala-version"},"Building against another Scala version"),Object(i.b)("p",null,"This section is only relevant if you use ",Object(i.b)("a",{parentName:"p",href:"https://www.scala-lang.org/"},"Scala")," in the stream processing application with Flink and Pravega."),Object(i.b)("p",null,"Parts of the Apache Flink use the language or depend on libraries written in Scala. Because Scala is ",Object(i.b)("strong",{parentName:"p"},"not")," strictly compatible across versions, there exist different versions of Flink compiled for different Scala versions.\nIf we use Scala code in the same application where we use the Apache Flink or the Flink connectors, we typically have to make sure we use a version of Flink that uses the same Scala version as our application."),Object(i.b)("p",null,"Each version of Flink has a preferred Scala version as determined by the official Flink docker image. We use the preferred version by default.\nTo depend on released Flink artifacts for a different Scala version, you need to edit the ",Object(i.b)("inlineCode",{parentName:"p"},"build.gradle")," file and change all entries for the Flink dependencies to have a different Scala version suffix. For example, ",Object(i.b)("inlineCode",{parentName:"p"},"flink-streaming-java_2.11")," would be replaced by ",Object(i.b)("inlineCode",{parentName:"p"},"flink-streaming-java_2.12")," for Scala ",Object(i.b)("strong",{parentName:"p"},"2.12"),"."),Object(i.b)("p",null,"In order to build a new version of Flink for a different Scala version, please refer to the ",Object(i.b)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-stable/start/building.html#scala-versions"},"Flink documentation"),"."),Object(i.b)("h2",{id:"setting-up-your-ide"},"Setting up your IDE"),Object(i.b)("p",null,"Connector project uses ",Object(i.b)("a",{parentName:"p",href:"https://projectlombok.org/"},"Project Lombok"),", so we should ensure that we have our IDE setup with the required plugins. (",Object(i.b)("strong",{parentName:"p"},"IntelliJ is recommended"),")."),Object(i.b)("p",null,"To import the source into IntelliJ:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Import the project directory into IntelliJ IDE. It will automatically detect the gradle project and import things correctly."),Object(i.b)("li",{parentName:"ol"},"Enable ",Object(i.b)("inlineCode",{parentName:"li"},"Annotation Processing")," by going to ",Object(i.b)("inlineCode",{parentName:"li"},"Build, Execution, Deployment")," -> ",Object(i.b)("inlineCode",{parentName:"li"},"Compiler")," > ",Object(i.b)("inlineCode",{parentName:"li"},"Annotation Processors")," and checking ",Object(i.b)("inlineCode",{parentName:"li"},"Enable annotation processing"),"."),Object(i.b)("li",{parentName:"ol"},"Install the ",Object(i.b)("inlineCode",{parentName:"li"},"Lombok Plugin"),". This can be found in ",Object(i.b)("inlineCode",{parentName:"li"},"Preferences")," -> ",Object(i.b)("inlineCode",{parentName:"li"},"Plugins"),". Restart your IDE."),Object(i.b)("li",{parentName:"ol"},"Connectors project compiles properly after applying the above steps.")),Object(i.b)("p",null,"For eclipse, we can generate eclipse project files by running ",Object(i.b)("inlineCode",{parentName:"p"},"./gradlew eclipse"),"."),Object(i.b)("h2",{id:"releases"},"Releases"),Object(i.b)("p",null,"The latest releases can be found on the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/flink-connectors/releases"},"Github Release")," project page."),Object(i.b)("h2",{id:"support"},"Support"),Object(i.b)("p",null,"Don\u2019t hesitate to ask! Contact the developers and community on the  ",Object(i.b)("a",{parentName:"p",href:"https://pravega-io.slack.com/"},"Slack")," if you need any help.\nOpen an issue if you found a bug on ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/flink-connectors/issues"},"Github Issues"),"."),Object(i.b)("h2",{id:"samples"},"Samples"),Object(i.b)("p",null,"Follow the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-samples"},"Pravega Samples")," repository to learn more about how to build and use the Flink Connector library."))}u.isMDXComponent=!0},147:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,m=b["".concat(o,".").concat(d)]||b[d]||u[d]||i;return n?r.a.createElement(m,c(c({ref:t},s),{},{components:n})):r.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},148:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},152:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(148),o=n(56),c=n.n(o);function l({toc:e,isChild:t}){return e.length?r.a.createElement("ul",{className:t?"":"table-of-contents"},e.map((e=>r.a.createElement("li",{key:e.id},r.a.createElement("a",{href:`#${e.id}`,dangerouslySetInnerHTML:{__html:e.value}}),r.a.createElement(l,{isChild:!0,toc:e.children}))))):null}t.a=function({toc:e}){return r.a.createElement("div",{className:Object(i.a)(c.a.tableOfContentsInline)},r.a.createElement(l,{toc:e}))}},156:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i}));var a=n(16);function r(e){const{siteConfig:t}=Object(a.default)();return t.customFields.features.includes(e.feature)?e.children:null}function i(e){const{siteConfig:t}=Object(a.default)();return!t.customFields.features.includes(e.feature)?e.children:null}}}]);