(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{143:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return l})),t.d(a,"toc",(function(){return c})),t.d(a,"default",(function(){return p}));var n=t(3),i=t(7),r=(t(0),t(155)),o={title:"Serialization"},l={unversionedId:"flink-connectors/serialization",id:"flink-connectors/serialization",isDocsHomePage:!1,title:"Serialization",description:"\x3c!--",source:"@site/docs/flink-connectors/serialization.md",slug:"/flink-connectors/serialization",permalink:"/docs/docs/flink-connectors/serialization",editUrl:"https://github.com/claudiofahey/flink-connectors/edit/docusaurus/documentation/src/docs/serialization.md",version:"current",sidebar:"mainSidebar",previous:{title:"Configurations",permalink:"/docs/docs/flink-connectors/configurations"},next:{title:"Spark Connectors for Pravega",permalink:"/docs/docs/spark-connectors/index"}},c=[{value:"Interoperability with Other Applications",id:"interoperability-with-other-applications",children:[]},{value:"Deserialize with metadata",id:"deserialize-with-metadata",children:[]}],s={toc:c};function p(e){var a=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},s,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Serialization")," refers to converting a data element in your Flink program to/from a message in a Pravega stream."),Object(r.b)("p",null,"Flink defines a standard interface for data serialization to/from byte messages delivered by various connectors. The core interfaces are:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://ci.apache.org/projects/flink/flink-docs-stable/api/java/org/apache/flink/streaming/util/serialization/SerializationSchema.html"},Object(r.b)("inlineCode",{parentName:"a"},"org.apache.flink.streaming.util.serialization.SerializationSchema"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://ci.apache.org/projects/flink/flink-docs-stable/api/java/org/apache/flink/streaming/util/serialization/DeserializationSchema.html"},Object(r.b)("inlineCode",{parentName:"a"},"org.apache.flink.streaming.util.serialization.DeserializationSchema")))),Object(r.b)("p",null,"Built-in serializers include:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://ci.apache.org/projects/flink/flink-docs-stable/api/java/org/apache/flink/streaming/util/serialization/SimpleStringSchema.html"},Object(r.b)("inlineCode",{parentName:"a"},"org.apache.flink.streaming.util.serialization.SimpleStringSchema"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://ci.apache.org/projects/flink/flink-docs-stable/api/java/org/apache/flink/streaming/util/serialization/TypeInformationSerializationSchema.html"},Object(r.b)("inlineCode",{parentName:"a"},"org.apache.flink.streaming.util.serialization.TypeInformationSerializationSchema")))),Object(r.b)("p",null,"The Pravega connector is designed to use Flink's serialization interfaces. For example, to read each stream event as a UTF-8 string:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"DeserializationSchema<String> schema = new SimpleStringSchema();\nFlinkPravegaReader<String> reader = new FlinkPravegaReader<>(..., schema);\nDataStream<MyEvent> stream = env.addSource(reader);\n")),Object(r.b)("h2",{id:"interoperability-with-other-applications"},"Interoperability with Other Applications"),Object(r.b)("p",null,"A common scenario is using Flink to process Pravega stream data produced by a non-Flink application. The Pravega client library used by such applications defines the ",Object(r.b)("a",{parentName:"p",href:"http://pravega.io/docs/latest/javadoc/clients/io/pravega/client/stream/Serializer.html"},Object(r.b)("inlineCode",{parentName:"a"},"io.pravega.client.stream.Serializer"))," interface for working with event data. The implementations of ",Object(r.b)("inlineCode",{parentName:"p"},"Serializer")," directly in a Flink program via built-in adapters can be used:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://github.com/pravega/flink-connectors/blob/master/src/main/java/io/pravega/connectors/flink/serialization/PravegaSerializationSchema.java"},Object(r.b)("inlineCode",{parentName:"a"},"io.pravega.connectors.flink.serialization.PravegaSerializationSchema"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://github.com/pravega/flink-connectors/blob/master/src/main/java/io/pravega/connectors/flink/serialization/PravegaDeserializationSchema.java"},Object(r.b)("inlineCode",{parentName:"a"},"io.pravega.connectors.flink.serialization.PravegaDeserializationSchema")))),Object(r.b)("p",null,"Below is an example, to pass an instance of the appropriate Pravega de/serializer class to the adapter's constructor:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"import io.pravega.client.stream.impl.JavaSerializer;\n...\nDeserializationSchema<MyEvent> adapter = new PravegaDeserializationSchema<>(\n    MyEvent.class, new JavaSerializer<MyEvent>());\nFlinkPravegaReader<MyEvent> reader = new FlinkPravegaReader<>(..., adapter);\nDataStream<MyEvent> stream = env.addSource(reader);\n")),Object(r.b)("p",null,"Note that the Pravega serializer must implement ",Object(r.b)("inlineCode",{parentName:"p"},"java.io.Serializable")," to be usable in a Flink program."),Object(r.b)("h2",{id:"deserialize-with-metadata"},"Deserialize with metadata"),Object(r.b)("p",null,"Pravega reader client wraps the event with the metadata in an ",Object(r.b)("inlineCode",{parentName:"p"},"EventRead")," data structure. Some Flink jobs might\ncare about the stream position of the event data which is in ",Object(r.b)("inlineCode",{parentName:"p"},"EventRead"),", e.g. for indexing purposes. "),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"PravegaDeserializationSchema")," offers a method to extract event with the metadata"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"public T extractEvent(EventRead<T> eventRead) {\n    return eventRead.getEvent();\n}\n")),Object(r.b)("p",null,"The default implementation can be overwritten to involve in metadata structure like ",Object(r.b)("inlineCode",{parentName:"p"},"EventPointer")," into the event\nby a custom extended ",Object(r.b)("inlineCode",{parentName:"p"},"PravegaDeserializationSchema"),". For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},'private static class MyJsonDeserializationSchema extends PravegaDeserializationSchema<JsonNode> {\n    private boolean includeMetadata;\n\n    public MyJsonDeserializationSchema(boolean includeMetadata) {\n        super(JsonNode.class, new JSONSerializer());\n        this.includeMetadata = includeMetadata;\n    }\n\n    @Override\n    public JsonNode extractEvent(EventRead<JsonNode> eventRead) {\n        JsonNode node = eventRead.getEvent();\n        if (includeMetadata) {\n            return ((ObjectNode) node).put("eventpointer", eventRead.getEventPointer().toBytes().array());\n        }\n        return node;\n    }\n}\n')))}p.isMDXComponent=!0},155:function(e,a,t){"use strict";t.d(a,"a",(function(){return b})),t.d(a,"b",(function(){return u}));var n=t(0),i=t.n(n);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),p=function(e){var a=i.a.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},b=function(e){var a=p(e.components);return i.a.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return i.a.createElement(i.a.Fragment,{},a)}},d=i.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(t),d=n,u=b["".concat(o,".").concat(d)]||b[d]||m[d]||r;return t?i.a.createElement(u,l(l({ref:a},s),{},{components:t})):i.a.createElement(u,l({ref:a},s))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);