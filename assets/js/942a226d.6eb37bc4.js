(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{123:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return o})),a.d(e,"metadata",(function(){return c})),a.d(e,"toc",(function(){return m})),a.d(e,"default",(function(){return p}));var n=a(3),r=a(7),b=(a(0),a(169)),o={title:"Terminology"},c={unversionedId:"pravega/terminology",id:"pravega/terminology",isDocsHomePage:!1,title:"Terminology",description:"\x3c!--",source:"@site/docs/pravega/terminology.md",slug:"/pravega/terminology",permalink:"/docs/docs/pravega/terminology",editUrl:"https://github.com/claudiofahey/pravega/edit/docusaurus/documentation/src/docs/terminology.md",version:"current",sidebar:"mainSidebar",previous:{title:"Pravega Concepts",permalink:"/docs/docs/pravega/pravega-concepts"},next:{title:"Pravega Key Features",permalink:"/docs/docs/pravega/key-features"}},m=[],l={toc:m};function p(t){var e=t.components,a=Object(r.a)(t,["components"]);return Object(b.b)("wrapper",Object(n.a)({},l,a,{components:e,mdxType:"MDXLayout"}),Object(b.b)("p",null,"The glossary of terms related to Pravega is given below:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"th"},"Term")),Object(b.b)("th",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"th"},"Definition")))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Pravega")),Object(b.b)("td",{parentName:"tr",align:null},"Pravega is an open source storage system that exposes ",Object(b.b)("strong",{parentName:"td"},"stream")," as the main primitive for continuous and unbounded data.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Stream")),Object(b.b)("td",{parentName:"tr",align:null},"A durable, elastic, append-only, unbounded sequence of bytes that has good performance and strong consistency.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"A ",Object(b.b)("strong",{parentName:"td"},"Stream")," is identified by a ",Object(b.b)("strong",{parentName:"td"},"Stream name")," and a ",Object(b.b)("strong",{parentName:"td"},"Scope"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"A ",Object(b.b)("strong",{parentName:"td"},"Stream")," is comprised of one or more ",Object(b.b)("strong",{parentName:"td"},"Stream Segments."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Stream Segment")),Object(b.b)("td",{parentName:"tr",align:null},"A shard of a ",Object(b.b)("strong",{parentName:"td"},"Stream"),".\xa0")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"The number of ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," in a ",Object(b.b)("strong",{parentName:"td"},"Stream")," might vary over time according to load and ",Object(b.b)("strong",{parentName:"td"},"Scaling Policy"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"In the absence of a ",Object(b.b)("strong",{parentName:"td"},"Scale Event"),", ",Object(b.b)("strong",{parentName:"td"},"Events")," written to a ",Object(b.b)("strong",{parentName:"td"},"Stream")," with the same ",Object(b.b)("strong",{parentName:"td"},"Routing Key")," are stored in the same ",Object(b.b)("strong",{parentName:"td"},"Stream Segment")," and are ordered.\xa0")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"When a ",Object(b.b)("strong",{parentName:"td"},"Scale Event")," occurs, the set of ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," of a ",Object(b.b)("strong",{parentName:"td"},"Stream")," changes and ",Object(b.b)("strong",{parentName:"td"},"Events")," written with a given ",Object(b.b)("strong",{parentName:"td"},"Routing Key")," ",Object(b.b)("em",{parentName:"td"},"K")," before the ",Object(b.b)("strong",{parentName:"td"},"Scaling Event")," are stored in a different ",Object(b.b)("strong",{parentName:"td"},"Stream Segment")," compared to ",Object(b.b)("strong",{parentName:"td"},"Events")," written with the same ",Object(b.b)("strong",{parentName:"td"},"Routing Key")," ",Object(b.b)("em",{parentName:"td"},"K")," after the event.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"In conjunction with ",Object(b.b)("strong",{parentName:"td"},"Reader Groups"),", the number of ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," is the maximum amount of read parallelism of a ",Object(b.b)("strong",{parentName:"td"},"Stream"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Scope")),Object(b.b)("td",{parentName:"tr",align:null},"A namespace for ",Object(b.b)("strong",{parentName:"td"},"Stream")," names.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"A ",Object(b.b)("strong",{parentName:"td"},"Stream")," name must be unique within a ",Object(b.b)("strong",{parentName:"td"},"Scope"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Event")),Object(b.b)("td",{parentName:"tr",align:null},"A collection of bytes within a ",Object(b.b)("strong",{parentName:"td"},"Stream."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"An ",Object(b.b)("strong",{parentName:"td"},"Event")," is associated with a ",Object(b.b)("strong",{parentName:"td"},"Routing Key."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Routing Key")),Object(b.b)("td",{parentName:"tr",align:null},"A property of an ",Object(b.b)("strong",{parentName:"td"},"Event")," used to route messages to ",Object(b.b)("strong",{parentName:"td"},"Readers."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"Two ",Object(b.b)("strong",{parentName:"td"},"Events")," with the same ",Object(b.b)("strong",{parentName:"td"},"Routing Key")," will be read by ",Object(b.b)("strong",{parentName:"td"},"Readers")," in exactly the same order they were written.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Reader")),Object(b.b)("td",{parentName:"tr",align:null},"A software application that reads data from one or more ",Object(b.b)("strong",{parentName:"td"},"Streams"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Writer")),Object(b.b)("td",{parentName:"tr",align:null},"A software application that writes data to one or more ",Object(b.b)("strong",{parentName:"td"},"Streams."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Pravega Java Client Library")),Object(b.b)("td",{parentName:"tr",align:null},"A Java library used by applications to interface with ",Object(b.b)("strong",{parentName:"td"},"Pravega"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Reader Group")),Object(b.b)("td",{parentName:"tr",align:null},"A named collection of one or more ",Object(b.b)("strong",{parentName:"td"},"Readers")," that read from a ",Object(b.b)("strong",{parentName:"td"},"Stream")," in parallel.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Pravega")," assigns ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," to the ",Object(b.b)("strong",{parentName:"td"},"Readers")," ensuring that all ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," are assigned to at least one ",Object(b.b)("strong",{parentName:"td"},"Reader")," and that they are balanced across the ",Object(b.b)("strong",{parentName:"td"},"Readers"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Position")),Object(b.b)("td",{parentName:"tr",align:null},"An offset within a ",Object(b.b)("strong",{parentName:"td"},"Stream"),", representing a type of recovery point for a ",Object(b.b)("strong",{parentName:"td"},"Reader"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"If a ",Object(b.b)("strong",{parentName:"td"},"Reader")," crashes, a ",Object(b.b)("strong",{parentName:"td"},"Position")," can be used to initialize the failed ",Object(b.b)("strong",{parentName:"td"},"Reader"),"'s replacement so that the replaced ",Object(b.b)("strong",{parentName:"td"},"Reader")," resumes processing the ",Object(b.b)("strong",{parentName:"td"},"Stream")," from where the failed ",Object(b.b)("strong",{parentName:"td"},"Reader")," left off.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Tier 1 Storage")),Object(b.b)("td",{parentName:"tr",align:null},"Short term, low-latency, data storage that guarantees the durability of data written to ",Object(b.b)("strong",{parentName:"td"},"Streams"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"The current implementation of ",Object(b.b)("strong",{parentName:"td"},"Tier 1")," uses\xa0\xa0",Object(b.b)("a",{parentName:"td",href:"http://bookkeeper.apache.org/"},"Apache Bookkeeper"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Tier 1")," storage keeps the most recent appends to streams in ",Object(b.b)("strong",{parentName:"td"},"Pravega."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"As data in ",Object(b.b)("strong",{parentName:"td"},"Tier 1")," ages, it is moved out of ",Object(b.b)("strong",{parentName:"td"},"Tier 1")," into ",Object(b.b)("strong",{parentName:"td"},"Tier 2."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Tier 2 Storage")),Object(b.b)("td",{parentName:"tr",align:null},"A portion of ",Object(b.b)("strong",{parentName:"td"},"Pravega")," storage based on cheap and deep persistent storage technology such as ",Object(b.b)("a",{parentName:"td",href:"https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html"},"HDFS"),", ",Object(b.b)("a",{parentName:"td",href:"https://www.dellemc.com/en-us/storage/isilon/index.htm#collapse"},"DellEMC's Isilon")," or ",Object(b.b)("a",{parentName:"td",href:"https://www.dellemc.com/en-us/storage/ecs/index.htm#collapse"},"DellEMC's Elastic Cloud Storage"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Pravega Server")),Object(b.b)("td",{parentName:"tr",align:null},"A component of ",Object(b.b)("strong",{parentName:"td"},"Pravega")," that implements the ",Object(b.b)("strong",{parentName:"td"},"Pravega")," data plane API for operations such as reading from and writing to ",Object(b.b)("strong",{parentName:"td"},"Streams"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"The data plane of ",Object(b.b)("strong",{parentName:"td"},"Pravega,")," also called the ",Object(b.b)("strong",{parentName:"td"},"Segment Store,")," is composed of one or more ",Object(b.b)("strong",{parentName:"td"},"Pravega Server")," instances.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Segment Store")),Object(b.b)("td",{parentName:"tr",align:null},"A collection of ",Object(b.b)("strong",{parentName:"td"},"Pravega Servers")," that in aggregate form the data plane of a Pravega cluster.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Controller")),Object(b.b)("td",{parentName:"tr",align:null},"A component of Pravega that implements the ",Object(b.b)("strong",{parentName:"td"},"Pravega")," control plane API for operations such as creating and retrieving information about ",Object(b.b)("strong",{parentName:"td"},"Streams"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"The control plane of ",Object(b.b)("strong",{parentName:"td"},"Pravega")," is composed of one or more ",Object(b.b)("strong",{parentName:"td"},"Controller")," instances coordinated by ",Object(b.b)("a",{parentName:"td",href:"https://zookeeper.apache.org/"},"Zookeeper"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Auto Scaling")),Object(b.b)("td",{parentName:"tr",align:null},"A Pravega concept that allows the number of ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," in a ",Object(b.b)("strong",{parentName:"td"},"Stream")," to change over time, based on ",Object(b.b)("strong",{parentName:"td"},"Scaling Policy."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Scaling Policy")),Object(b.b)("td",{parentName:"tr",align:null},"A configuration item of a ",Object(b.b)("strong",{parentName:"td"},"Stream")," that determines how the number of ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," in the ",Object(b.b)("strong",{parentName:"td"},"Stream")," should change over time.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"There are three kinds of ",Object(b.b)("strong",{parentName:"td"},"Scaling Policy"),", a ",Object(b.b)("strong",{parentName:"td"},"Stream")," has exactly one of the following at any given time.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"- Fixed number of ",Object(b.b)("strong",{parentName:"td"},"Stream Segments"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"- Change the number of ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," based on the number of bytes per second written to the ",Object(b.b)("strong",{parentName:"td"},"Stream")," (Size- based)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"- Change the number of ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," based on the number of ",Object(b.b)("strong",{parentName:"td"},"Events")," per second written to the ",Object(b.b)("strong",{parentName:"td"},"Stream")," (Event-based)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Scale Event")),Object(b.b)("td",{parentName:"tr",align:null},"There are two types of ",Object(b.b)("strong",{parentName:"td"},"Scale Event"),": Scale-Up Event and Scale-Down Event. A ",Object(b.b)("strong",{parentName:"td"},"Scale Event")," triggers ",Object(b.b)("strong",{parentName:"td"},"Auto Scaling"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"A Scale-Up Event occurs when there is an increase in load, the number of ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," are increased by splitting one or more ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," in the ",Object(b.b)("strong",{parentName:"td"},"Stream"),".\xa0")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"A Scale-Down Event occurs when there is a decrease in load, the number of  ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," are reduced by merging one or more ",Object(b.b)("strong",{parentName:"td"},"Stream Segments")," in the ",Object(b.b)("strong",{parentName:"td"},"Stream"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Transaction")),Object(b.b)("td",{parentName:"tr",align:null},"A collection of ",Object(b.b)("strong",{parentName:"td"},"Stream")," write operations that are applied atomically to the ",Object(b.b)("strong",{parentName:"td"},"Stream"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"Either all of the bytes in a ",Object(b.b)("strong",{parentName:"td"},"Transaction")," are written to the ",Object(b.b)("strong",{parentName:"td"},"Stream")," or none of them are.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"State Synchronizer")),Object(b.b)("td",{parentName:"tr",align:null},"An abstraction built on top of ",Object(b.b)("strong",{parentName:"td"},"Pravega")," to enable the implementation of replicated state using a Pravega ",Object(b.b)("strong",{parentName:"td"},"segment")," to back up the state transformations.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null}),Object(b.b)("td",{parentName:"tr",align:null},"A ",Object(b.b)("strong",{parentName:"td"},"State Synchronizer")," allows a piece of data to be shared between multiple processes with strong consistency and optimistic concurrency.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"Checkpoint")),Object(b.b)("td",{parentName:"tr",align:null},"A kind of ",Object(b.b)("strong",{parentName:"td"},"Event")," that signals all ",Object(b.b)("strong",{parentName:"td"},"Readers")," within a ",Object(b.b)("strong",{parentName:"td"},"Reader Group")," to persist their state.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",{parentName:"td"},"StreamCut")),Object(b.b)("td",{parentName:"tr",align:null},"A ",Object(b.b)("strong",{parentName:"td"},"StreamCut")," represents a consistent position in the ",Object(b.b)("strong",{parentName:"td"},"Stream"),". It contains a set of ",Object(b.b)("strong",{parentName:"td"},"Segment")," and offset pairs for a single ",Object(b.b)("strong",{parentName:"td"},"Stream")," which represents the complete keyspace at a given point in time. The offset always points to the event boundary and hence there will be no offset pointing to an incomplete ",Object(b.b)("strong",{parentName:"td"},"Event"),".")))))}p.isMDXComponent=!0},169:function(t,e,a){"use strict";a.d(e,"a",(function(){return d})),a.d(e,"b",(function(){return g}));var n=a(0),r=a.n(n);function b(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function c(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){b(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function m(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},b=Object.keys(t);for(n=0;n<b.length;n++)a=b[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(t);for(n=0;n<b.length;n++)a=b[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var l=r.a.createContext({}),p=function(t){var e=r.a.useContext(l),a=e;return t&&(a="function"==typeof t?t(e):c(c({},e),t)),a},d=function(t){var e=p(t.components);return r.a.createElement(l.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.a.createElement(r.a.Fragment,{},e)}},i=r.a.forwardRef((function(t,e){var a=t.components,n=t.mdxType,b=t.originalType,o=t.parentName,l=m(t,["components","mdxType","originalType","parentName"]),d=p(a),i=n,g=d["".concat(o,".").concat(i)]||d[i]||s[i]||b;return a?r.a.createElement(g,c(c({ref:e},l),{},{components:a})):r.a.createElement(g,c({ref:e},l))}));function g(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var b=a.length,o=new Array(b);o[0]=i;var c={};for(var m in e)hasOwnProperty.call(e,m)&&(c[m]=e[m]);c.originalType=t,c.mdxType="string"==typeof t?t:n,o[1]=c;for(var l=2;l<b;l++)o[l]=a[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}i.displayName="MDXCreateElement"}}]);