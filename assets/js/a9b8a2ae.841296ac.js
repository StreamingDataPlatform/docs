(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{128:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return b}));var r=a(3),n=a(7),i=(a(0),a(160)),o={title:"Streaming"},l={unversionedId:"flink-connectors/streaming",id:"flink-connectors/streaming",isDocsHomePage:!1,title:"Streaming",description:"\x3c!--",source:"@site/docs/flink-connectors/streaming.md",slug:"/flink-connectors/streaming",permalink:"/docs/docs/flink-connectors/streaming",editUrl:"https://github.com/claudiofahey/flink-connectors/edit/docusaurus/documentation/src/docs/streaming.md",version:"current",sidebar:"mainSidebar",previous:{title:"Quick Start",permalink:"/docs/docs/flink-connectors/quickstart"},next:{title:"Batch",permalink:"/docs/docs/flink-connectors/batch"}},c=[{value:"Table of Contents",id:"table-of-contents",children:[]},{value:"FlinkPravegaReader",id:"flinkpravegareader",children:[{value:"Parameters",id:"parameters",children:[]},{value:"Input Stream(s)",id:"input-streams",children:[]},{value:"Reader Parallelism",id:"reader-parallelism",children:[]},{value:"Checkpointing",id:"checkpointing",children:[]},{value:"Timestamp Extraction (Watermark Emission)",id:"timestamp-extraction-watermark-emission",children:[]},{value:"StreamCuts",id:"streamcuts",children:[]}]},{value:"FlinkPravegaWriter",id:"flinkpravegawriter",children:[{value:"Example",id:"example-1",children:[]},{value:"Parameters",id:"parameters-1",children:[]},{value:"Writer Parallelism",id:"writer-parallelism",children:[]},{value:"Event Routing",id:"event-routing",children:[]},{value:"Event Time Ordering",id:"event-time-ordering",children:[]},{value:"Watermark",id:"watermark",children:[]},{value:"Writer Modes",id:"writer-modes",children:[]}]}],s={toc:c};function b(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The Flink Connector library for Pravega provides a data source and data sink\nfor use with the Flink Streaming API. See the below sections for details."),Object(i.b)("h2",{id:"table-of-contents"},"Table of Contents"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#flinkpravegareader"},"FlinkPravegaReader"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#parameters"},"Parameters")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#input-streams"},"Input Stream(s)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#reader-parallelism"},"Reader Parallelism")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#checkpointing"},"Checkpointing")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#timestamp-extraction-watermark-emission"},"Timestamp Extraction (Watermark Emission)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#streamcuts"},"Stream Cuts")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#historical-stream-processing"},"Historical Stream Processing")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#flinkpravegawriter"},"FlinkPravegaWriter"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#parameters-1"},"Parameters")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#writer-parallelism"},"Writer Parallelism")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#event-routing"},"Event Routing")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#event-time-ordering"},"Event Time Ordering")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#watermark"},"Watermark")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#writer-modes"},"Writer Modes")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metrics"},"Metrics")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#serialization"},"Data Serialization"))),Object(i.b)("h2",{id:"flinkpravegareader"},"FlinkPravegaReader"),Object(i.b)("p",null,"A Pravega Stream may be used as a data source within a Flink streaming program using an instance of   ",Object(i.b)("inlineCode",{parentName:"p"},"io.pravega.connectors.flink.FlinkPravegaReader"),". The reader reads a given Pravega Stream (or multiple streams) as a ",Object(i.b)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-stable/api/java/org/apache/flink/streaming/api/datastream/DataStream.html"},Object(i.b)("inlineCode",{parentName:"a"},"DataStream"))," (the basic abstraction of the Flink Streaming API)."),Object(i.b)("p",null,"Open a Pravega Stream as a DataStream using the method ",Object(i.b)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-stable/api/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.html#addSource-org.apache.flink.streaming.api.functions.source.SourceFunction-"},Object(i.b)("inlineCode",{parentName:"a"},"StreamExecutionEnvironment::addSource")),"."),Object(i.b)("h4",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n// Define the Pravega configuration\nPravegaConfig config = PravegaConfig.fromParams(params);\n\n// Define the event deserializer\nDeserializationSchema<MyClass> deserializer = ...\n\n// Define the data stream\nFlinkPravegaReader<MyClass> pravegaSource = FlinkPravegaReader.<MyClass>builder()\n    .forStream(...)\n    .withPravegaConfig(config)\n    .withDeserializationSchema(deserializer)\n    .build();\nDataStream<MyClass> stream = env.addSource(pravegaSource);\n")),Object(i.b)("h3",{id:"parameters"},"Parameters"),Object(i.b)("p",null,"A builder API is provided to construct an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaReader"),". See the table below for a summary of builder properties.  Note that, the builder accepts an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"PravegaConfig")," for common configuration properties.  See the ",Object(i.b)("a",{parentName:"p",href:"/docs/docs/flink-connectors/configurations"},"configurations")," page for more information."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Method"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withPravegaConfig")),Object(i.b)("td",{parentName:"tr",align:null},"The Pravega client configuration, which includes connection info, security info, and a default scope.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"forStream")),Object(i.b)("td",{parentName:"tr",align:null},"The stream to be read from, with optional start and/or end position.  May be called repeatedly to read numerous streams in parallel.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"uid")),Object(i.b)("td",{parentName:"tr",align:null},"The uid to identify the checkpoint state of this source.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withReaderGroupScope")),Object(i.b)("td",{parentName:"tr",align:null},"The scope to store the Reader Group synchronization stream into.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withReaderGroupName")),Object(i.b)("td",{parentName:"tr",align:null},"The Reader Group name for display purposes.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withReaderGroupRefreshTime")),Object(i.b)("td",{parentName:"tr",align:null},"The interval for synchronizing the Reader Group state across parallel source instances.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withCheckpointInitiateTimeout")),Object(i.b)("td",{parentName:"tr",align:null},"The timeout for executing a checkpoint of the Reader Group state.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withDeserializationSchema")),Object(i.b)("td",{parentName:"tr",align:null},"The deserialization schema which describes how to turn byte messages into events.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withTimestampAssigner")),Object(i.b)("td",{parentName:"tr",align:null},"The ",Object(i.b)("inlineCode",{parentName:"td"},"AssignerWithTimeWindows")," implementation which describes the event timestamp and Pravega watermark strategy in event time semantics.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"enableMetrics")),Object(i.b)("td",{parentName:"tr",align:null},"true or false to enable/disable reporting Pravega metrics. Metrics is enabled by default.")))),Object(i.b)("h3",{id:"input-streams"},"Input Stream(s)"),Object(i.b)("p",null,"Each stream in Pravega is contained by a scope.  A scope acts as a namespace for one or more streams.  The ",Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaReader")," is able to read from numerous streams in parallel, even across scopes.  The builder API accepts both ",Object(i.b)("strong",{parentName:"p"},"qualified")," and ",Object(i.b)("strong",{parentName:"p"},"unqualified")," stream names.  "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"In qualified, the scope is explicitly specified, e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"my-scope/my-stream"),".  "),Object(i.b)("li",{parentName:"ul"},"In Unqualified stream names are assumed to refer to the default scope as set in the ",Object(i.b)("inlineCode",{parentName:"li"},"PravegaConfig"),".")),Object(i.b)("p",null,"A stream may be specified in one of three ways:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"As a string containing a qualified name, in the form ",Object(i.b)("inlineCode",{parentName:"li"},"scope/stream"),"."),Object(i.b)("li",{parentName:"ol"},"As a string containing an unqualified name, in the form ",Object(i.b)("inlineCode",{parentName:"li"},"stream"),". Such streams are resolved to the default scope."),Object(i.b)("li",{parentName:"ol"},"As an instance of ",Object(i.b)("inlineCode",{parentName:"li"},"io.pravega.client.stream.Stream"),", e.g. ",Object(i.b)("inlineCode",{parentName:"li"},'Stream.of("my-scope", "my-stream")'),".")),Object(i.b)("h3",{id:"reader-parallelism"},"Reader Parallelism"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaReader")," supports parallelization. Use the ",Object(i.b)("inlineCode",{parentName:"p"},"setParallelism")," method to of ",Object(i.b)("inlineCode",{parentName:"p"},"Datastream")," to configure the number of parallel instances to execute.  The parallel instances consume the stream in a coordinated manner, each consuming one or more stream segments."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," Coordination is achieved with the use of a Pravega Reader Group, which is based on a ",Object(i.b)("a",{parentName:"p",href:"http://pravega.io/docs/latest/pravega-concepts/#state-synchronizers"},"State Synchronizer"),". The Synchronizer creates a backing stream that may be manually deleted after the completion of the job."),Object(i.b)("h3",{id:"checkpointing"},"Checkpointing"),Object(i.b)("p",null,"In order to make state fault tolerant, Flink needs to ",Object(i.b)("strong",{parentName:"p"},"checkpoint")," the state. Checkpoints allow Flink to recover state and positions in the streams to give the application the same semantics as a failure-free execution. The reader is compatible with Flink checkpoints and savepoints. The reader automatically recovers from failure by rewinding to the checkpointed position in the stream."),Object(i.b)("p",null,"A ",Object(i.b)("strong",{parentName:"p"},"savepoint")," is self-contained; it contains all information needed to resume from the correct position."),Object(i.b)("p",null,"The checkpoint mechanism works as a two-step process:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("a",{parentName:"li",href:"https://ci.apache.org/projects/flink/flink-docs-stable/api/java/org/apache/flink/runtime/checkpoint/MasterTriggerRestoreHook.html"},"master hook")," handler from the job manager initiates the ",Object(i.b)("a",{parentName:"li",href:"https://ci.apache.org/projects/flink/flink-docs-stable/api/java/org/apache/flink/runtime/checkpoint/MasterTriggerRestoreHook.html#triggerCheckpoint-long-long-java.util.concurrent.Executor-"},Object(i.b)("inlineCode",{parentName:"a"},"triggerCheckpoint"))," request to  the ",Object(i.b)("inlineCode",{parentName:"li"},"ReaderCheckpointHook")," that was registered with the Job Manager during ",Object(i.b)("inlineCode",{parentName:"li"},"FlinkPravegaReader")," source initialization. The ",Object(i.b)("inlineCode",{parentName:"li"},"ReaderCheckpointHook")," handler notifies Pravega to checkpoint the current reader state. This is a non-blocking call which returns a ",Object(i.b)("inlineCode",{parentName:"li"},"future")," once Pravega readers are done with the checkpointing."),Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("inlineCode",{parentName:"li"},"CheckPoint")," event will be sent by Pravega as part of the data stream flow and on receiving the event, the ",Object(i.b)("inlineCode",{parentName:"li"},"FlinkPravegaReader")," will initiate ",Object(i.b)("a",{parentName:"li",href:"https://github.com/apache/flink/blob/master/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/checkpoint/ExternallyInducedSource.java#L73"},Object(i.b)("inlineCode",{parentName:"a"},"triggerCheckpoint"))," request to effectively let Flink continue and complete the checkpoint process.")),Object(i.b)("h3",{id:"timestamp-extraction-watermark-emission"},"Timestamp Extraction (Watermark Emission)"),Object(i.b)("p",null,"Flink requires the events\u2019 timestamps (each element in the stream needs to have its event timestamp assigned). This is achieved by accessing/extracting the timestamp from some field in the element. These are used to tell the system about progress in event time."),Object(i.b)("p",null,"Since Pravega 0.6, Pravega has proposed a new ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/wiki/PDP-33:-Watermarking"},"watermarking API")," to  enable the writer to provide time information.\nOn the reader side, a new concept ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/wiki/PDP-33:-Watermarking#event-reader-api-changes"},Object(i.b)("inlineCode",{parentName:"a"},"TimeWindow"))," is proposed to represent a time window for the events which are currently being read by a reader."),Object(i.b)("p",null,"It is possible to use event time semantics with either pravega watermark (after 0.6) or normal watermark. "),Object(i.b)("p",null,"To use Pravega watermark, an interface called ",Object(i.b)("inlineCode",{parentName:"p"},"AssignerWithTimeWindows")," should be implemented in the application via an application-specific timestamp assigner and a watermark generator with ",Object(i.b)("inlineCode",{parentName:"p"},"TimeWindow"),". Different applications can choose to be more or less conservative with the given ",Object(i.b)("inlineCode",{parentName:"p"},"TimeWindow"),".\n",Object(i.b)("inlineCode",{parentName:"p"},"LowerBoundAssigner")," is provided as a default implementation of the most conservative watermark. ",Object(i.b)("inlineCode",{parentName:"p"},"LowerBoundAssigner")," periodically emits the watermark which equals the lower bound of TimeWindow.  You can set the period of watermark emission like below."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nenv.getConfig().setAutoWatermarkInterval(AUTO_WATERMARK_INTERVAL_MS);\n")),Object(i.b)("p",null,"To use normal watermark, you can follow ",Object(i.b)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-stable/dev/event_timestamps_watermarks.html#timestamp-assigners--watermark-generators"},"Flink documentation"),". Simply, specify an ",Object(i.b)("inlineCode",{parentName:"p"},"AssignerWithPeriodicWatermarks")," or ",Object(i.b)("inlineCode",{parentName:"p"},"AssignerWithPunctuatedWatermarks")," on the ",Object(i.b)("inlineCode",{parentName:"p"},"DataStream")," as normal."),Object(i.b)("p",null,"Each parallel instance of the source processes one or more stream segments in parallel. Each watermark generator instance will receive events multiplexed from numerous segments. Be aware that segments are processed in parallel, and that no effort is made to order the events across segments in terms of their event time.  Also, a given segment may be reassigned to another parallel instance at any time, preserving exactly-once behavior but causing further spread in observed event times."),Object(i.b)("h3",{id:"streamcuts"},"StreamCuts"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"StreamCut")," represents a specific position in a Pravega Stream, which may be obtained from various API interactions with the Pravega client. The ",Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaReader")," accepts a ",Object(i.b)("inlineCode",{parentName:"p"},"StreamCut")," as the start and/or end position of a given stream. For further reading on\nStreamCuts, please refer to documentation on ",Object(i.b)("a",{parentName:"p",href:"http://pravega.io/docs/latest/streamcuts/"},"StreamCut")," and ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-samples/tree/master/pravega-client-examples/src/main/java/io/pravega/example/streamcuts"},"sample code"),"."),Object(i.b)("p",null,"Many Readers will be reading Events from the tail of the Stream. Tail reads corresponding to recently written Events are immediately delivered to Readers. "),Object(i.b)("p",null,"Here is an example for a Flink application to perform tail-read."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'StreamManager streamManager = StreamManager.create(pravegaConfig.getClientConfig());\nStreamCut tailStreamCut = streamManager.getStreamInfo("scope", "stream").getTailStreamCut();\n\nFlinkPravegaReader<MyClass> pravegaSource = FlinkPravegaReader.<MyClass>builder()\n    .forStream(streamName, tailStreamCut)\n    .withPravegaConfig(config)\n    .withDeserializationSchema(deserializer)\n    .build();\nDataStream<MyClass> stream = env.addSource(pravegaSource);\n\n')),Object(i.b)("h4",{id:"historical-stream-processing"},"Historical Stream Processing"),Object(i.b)("p",null,"Historical processing refers to processing stream data from a specific position in the stream rather than from the stream's tail.  The builder API provides an overloaded method ",Object(i.b)("inlineCode",{parentName:"p"},"forStream")," that accepts a ",Object(i.b)("inlineCode",{parentName:"p"},"StreamCut")," parameter for this purpose."),Object(i.b)("p",null,"One such example is re-processing a stream, where we may have to process the data from the beginning (or from a certain point in the stream) to re-derive the output. For instance, in situations where the computation logic has been changed to address new additional criteria, or we fixed a bug or doing a typical A/B testing etc., where the ability to consume historical data as a stream is critical."),Object(i.b)("h2",{id:"flinkpravegawriter"},"FlinkPravegaWriter"),Object(i.b)("p",null,"A Pravega Stream may be used as a data sink within a Flink program using an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"io.pravega.connectors.flink.FlinkPravegaWriter"),". Add an instance of the writer to the dataflow program using the method ",Object(i.b)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-stable/api/java/org/apache/flink/streaming/api/datastream/DataStream.html#addSink-org.apache.flink.streaming.api.functions.sink.SinkFunction-"},Object(i.b)("inlineCode",{parentName:"a"},"DataStream::addSink")),"."),Object(i.b)("h3",{id:"example-1"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-Java"},"StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n// Define the Pravega configuration\nPravegaConfig config = PravegaConfig.fromParams(params);\n\n// Define the event serializer\nSerializationSchema<MyClass> serializer = ...\n\n// Define the event router for selecting the Routing Key\nPravegaEventRouter<MyClass> router = ...\n\n// Define the sink function\nFlinkPravegaWriter<MyClass> pravegaSink = FlinkPravegaWriter.<MyClass>builder()\n   .forStream(...)\n   .withPravegaConfig(config)\n   .withSerializationSchema(serializer)\n   .withEventRouter(router)\n   .withWriterMode(PravegaWriterMode.EXACTLY_ONCE)\n   .build();\n\nDataStream<MyClass> stream = ...\nstream.addSink(pravegaSink);\n")),Object(i.b)("h3",{id:"parameters-1"},"Parameters"),Object(i.b)("p",null,"A builder API is provided to construct an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaWriter"),". See the table below for a summary of builder properties.  Note that the builder accepts an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"PravegaConfig")," for common configuration properties.  See the ",Object(i.b)("a",{parentName:"p",href:"/docs/docs/flink-connectors/configurations"},"configurations")," page for more information."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Method"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withPravegaConfig")),Object(i.b)("td",{parentName:"tr",align:null},"The Pravega client configuration, which includes connection info, security info, and a default scope.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"forStream")),Object(i.b)("td",{parentName:"tr",align:null},"The stream to be written to.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withWriterMode")),Object(i.b)("td",{parentName:"tr",align:null},"The writer mode to provide ",Object(i.b)("em",{parentName:"td"},"Best-effort"),", ",Object(i.b)("em",{parentName:"td"},"At-least-once"),", or ",Object(i.b)("em",{parentName:"td"},"Exactly-once")," guarantees.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withTxnLeaseRenewalPeriod")),Object(i.b)("td",{parentName:"tr",align:null},"The Transaction lease renewal period that supports the ",Object(i.b)("em",{parentName:"td"},"Exactly-once")," writer mode.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withSerializationSchema")),Object(i.b)("td",{parentName:"tr",align:null},"The serialization schema which describes how to turn events into byte messages.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withEventRouter")),Object(i.b)("td",{parentName:"tr",align:null},"The router function which determines the Routing Key for a given event.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"enableWatermark")),Object(i.b)("td",{parentName:"tr",align:null},"true or false to enable/disable emitting Flink watermark in event-time semantics to Pravega streams.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"enableMetrics")),Object(i.b)("td",{parentName:"tr",align:null},"true or false to enable/disable reporting Pravega metrics. Metrics is enabled by default.")))),Object(i.b)("h3",{id:"writer-parallelism"},"Writer Parallelism"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaWriter")," supports parallelization. Use the ",Object(i.b)("inlineCode",{parentName:"p"},"setParallelism")," method to configure the number of parallel instances to execute."),Object(i.b)("h3",{id:"event-routing"},"Event Routing"),Object(i.b)("p",null,"Every event written to a Pravega Stream has an associated Routing Key.  The Routing Key is the basis for event ordering.  See the ",Object(i.b)("a",{parentName:"p",href:"http://pravega.io/docs/latest/pravega-concepts/#events"},"Pravega Concepts")," for details."),Object(i.b)("p",null,"When constructing the ",Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaWriter"),", please provide an implementation of ",Object(i.b)("inlineCode",{parentName:"p"},"io.pravega.connectors.flink.PravegaEventRouter")," which will guarantee the event ordering. In Pravega, events are guaranteed to be ordered at the segment level."),Object(i.b)("p",null,"For example, to guarantee write order specific to sensor id, you could provide a router implementation like below."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"private static class SensorEventRouter<SensorEvent> implements PravegaEventRouter<SensorEvent> {\n        @Override\n        public String getRoutingKey(SensorEvent event) {\n            return event.getId();\n        }\n    }\n\n")),Object(i.b)("h3",{id:"event-time-ordering"},"Event Time Ordering"),Object(i.b)("p",null,"For programs that use Flink's event time semantics, the connector library supports writing events in event time order. In combination with a Routing Key, this establishes a well-understood ordering for each key in the output stream."),Object(i.b)("p",null,"Use the method ",Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaUtils::writeToPravegaInEventTimeOrder")," to write a given ",Object(i.b)("inlineCode",{parentName:"p"},"DataStream")," to a Pravega Stream such that events are automatically ordered by event time (on a per-key basis). Refer ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/flink-connectors/blob/7971206038b51b3cf0e317e194c552c4646e5c20/src/test/java/io/pravega/connectors/flink/FlinkPravegaWriterITCase.java#L93"},"here")," for sample code."),Object(i.b)("h3",{id:"watermark"},"Watermark"),Object(i.b)("p",null,"Flink applications in event time semantics are carrying watermarks within each operator."),Object(i.b)("p",null,"Both Pravega transactional and non-transactional writers provide ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/wiki/PDP-33:-Watermarking#event-writer-api-changes"},"watermark API")," to indicate the event-time watermark for a stream.\nWith ",Object(i.b)("inlineCode",{parentName:"p"},"enableWatermark(true)"),", each watermark in Flink will be emitted into a Pravega stream."),Object(i.b)("h3",{id:"writer-modes"},"Writer Modes"),Object(i.b)("p",null,"Writer modes relate to guarantees about the persistence of events emitted by the sink to a Pravega Stream.  The writer supports three writer modes:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Best-effort")," - Any write failures will be ignored hence there could be data loss."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"At-least-once")," - All events are persisted in Pravega. Duplicate events\nare possible, due to retries or in case of failure and subsequent recovery."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Exactly-once")," - All events are persisted in Pravega using a transactional approach integrated with the Flink checkpointing feature.")),Object(i.b)("p",null,"By default, the ",Object(i.b)("em",{parentName:"p"},"At-least-once")," option is enabled and use ",Object(i.b)("inlineCode",{parentName:"p"},".withWriterMode(...)")," option to override the value."),Object(i.b)("p",null,"See the ",Object(i.b)("a",{parentName:"p",href:"http://pravega.io/docs/latest/pravega-concepts/#transactions"},"Pravega documentation")," for details on transactional behavior."),Object(i.b)("h1",{id:"metrics"},"Metrics"),Object(i.b)("p",null,"Metrics are reported by default unless it is explicitly disabled using ",Object(i.b)("inlineCode",{parentName:"p"},"enableMetrics(false)")," option.\nSee ",Object(i.b)("a",{parentName:"p",href:"/docs/docs/flink-connectors/metrics"},"Metrics")," page for more details on type of metrics that are reported."),Object(i.b)("h1",{id:"serialization"},"Serialization"),Object(i.b)("p",null,"See the ",Object(i.b)("a",{parentName:"p",href:"/docs/docs/flink-connectors/serialization"},"serialization")," page for more information on how to use the ",Object(i.b)("em",{parentName:"p"},"serializer")," and ",Object(i.b)("em",{parentName:"p"},"deserializer"),"."))}b.isMDXComponent=!0},160:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return u}));var r=a(0),n=a.n(r);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=n.a.createContext({}),b=function(e){var t=n.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=b(e.components);return n.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=b(a),d=r,u=m["".concat(o,".").concat(d)]||m[d]||p[d]||i;return a?n.a.createElement(u,l(l({ref:t},s),{},{components:a})):n.a.createElement(u,l({ref:t},s))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);