(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{155:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=b(n),d=a,u=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return n?r.a.createElement(u,s(s({ref:t},l),{},{components:n})):r.a.createElement(u,s({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),o=(n(0),n(155)),i={title:"Transactions"},s={unversionedId:"pravega/transactions",id:"pravega/transactions",isDocsHomePage:!1,title:"Transactions",description:"\x3c!--",source:"@site/docs/pravega/transactions.md",slug:"/pravega/transactions",permalink:"/docs/docs/pravega/transactions",editUrl:"https://github.com/claudiofahey/pravega/edit/docusaurus/documentation/src/docs/transactions.md",version:"current",sidebar:"mainSidebar",previous:{title:"State Synchronizer",permalink:"/docs/docs/pravega/state-synchronizer"},next:{title:"StreamCuts",permalink:"/docs/docs/pravega/streamcuts"}},c=[{value:"Pravega Transactions and the Console Writer and Console Reader Apps",id:"pravega-transactions-and-the-console-writer-and-console-reader-apps",children:[{value:"ConsoleReader",id:"consolereader",children:[]},{value:"ConsoleWriter",id:"consolewriter",children:[]}]},{value:"Using the ConsoleWriter to Begin and Commit a Transaction",id:"using-the-consolewriter-to-begin-and-commit-a-transaction",children:[{value:"More on Begin Transaction",id:"more-on-begin-transaction",children:[]}]}],l={toc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This article explores how to write a set of Events to a Stream atomically using\nPravega Transactions."),Object(o.b)("p",null,"Instructions for running the sample applications can be found in the",Object(o.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-samples/blob/v0.5.0/pravega-client-examples/README.md"},"\xa0Pravega\nSamples\nreadme"),"."),Object(o.b)("p",null,"You really should be familiar with Pravega Concepts (see\xa0",Object(o.b)("a",{parentName:"p",href:"/docs/docs/pravega/pravega-concepts"},"Pravega\nConcepts"),") before continuing reading this page."),Object(o.b)("h2",{id:"pravega-transactions-and-the-console-writer-and-console-reader-apps"},"Pravega Transactions and the Console Writer and Console Reader Apps"),Object(o.b)("p",null,"We have written a couple of applications, ConsoleReader and ConsoleWriter that\nhelp illustrate reading and writing data with Pravega and in particular to\nillustrate the Transaction facility in the Pravega programming model. \xa0You can\nfind those applications\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-samples/tree/v0.5.0/pravega-client-examples/src/main/java/io/pravega/example/consolerw"},"here"),"."),Object(o.b)("h3",{id:"consolereader"},"ConsoleReader"),Object(o.b)("p",null,"The ConsoleReader app is very simple. \xa0It uses the Pravega Java Client Library\nto read from a Stream and output each Event onto the console. \xa0It runs\nindefinitely, so you have to kill the process to terminate the program."),Object(o.b)("h3",{id:"consolewriter"},"ConsoleWriter"),Object(o.b)("p",null,"The ConsoleWriter app is a bit more sophisticated. \xa0It uses the Pravega Java\nClient Library to write Events to a Stream, including Events written in the\ncontext of a Pravega Transaction. \xa0To make manipulating Transactions a bit\neasier, we provide a console-based CLI. \xa0The help text for the CLI is shown\nbelow:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"ConsoleWriter Help text")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"Enter one of the following commands at the command line prompt:\n\nIf no command is entered, the line is treated as a parameter to the WRITE_EVENT command.\n\nWRITE_EVENT {event} - write the {event} out to the Stream or the current Transaction.\nWRITE_EVENT_RK <<{routingKey}>> , {event} - write the {event} out to the Stream or the current Transaction using {routingKey}. Note << and >> around {routingKey}.\nBEGIN - begin a Transaction. Only one Transaction at a time is supported by the CLI.\nGET_TXN_ID - output the current Transaction's Id (if a Transaction is running)\nFLUSH - flush the current Transaction (if a Transaction is running)\nCOMMIT - commit the Transaction (if a Transaction is running)\nABORT - abort the Transaction (if a Transaction is running)\nSTATUS - check the status of the Transaction(if a Transaction is running)\nHELP - print out a list of commands.\nQUIT - terminate the program.\n\nexamples/someStream >\n")),Object(o.b)("p",null,"So writing a single Event is simple, just type some text (you don't even have to\ntype the WRITE","_","EVENT command if you don't want to)."),Object(o.b)("p",null,"But we really want to talk about Pravega Transactions, so lets dive into that."),Object(o.b)("h1",{id:"pravega-transactions"},"Pravega Transactions"),Object(o.b)("p",null,'The idea with a Pravega Transaction is that it allows an application to prepare\na set of Events that can be written "all at once" to a Stream. \xa0This allows an\napplication to "commit" a bunch of Events Atomically. This is done by writing them into the Transaction\nand calling commit to append them to the Stream. \xa0An application might\nwant to do this in cases where it wants the Events to be durably stored and\nlater decided whether or not those Events should be\nappended to the Stream. \xa0This allows the application\nto control when the set of Events are made visible to Readers.'),Object(o.b)("p",null,"A Transaction is created via an EventStreamWriter. \xa0Recall that an\nEventStreamWriter itself is created through a ClientFactory and is constructed\nto operate against a Stream. \xa0Transactions are therefore bound to a Stream.\n\xa0Once a Transaction is created, it acts a lot like a Writer. \xa0Applications Write\nEvents to the Transaction and once acknowledged, the data is considered durably\npersisted in the Transaction. \xa0Note that the data written to a Transaction will\nnot be visible to Readers until the Transaction is committed. \xa0In addition to\nwriteEvent and writeEvent using a routing key, there are several Transaction\nspecific operations provided:"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Operation")),Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Discussion")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"getTxnId()"),Object(o.b)("td",{parentName:"tr",align:null},"Retrieve the unique identifier for the Transaction.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null}),Object(o.b)("td",{parentName:"tr",align:null},"Pravega generates a unique UUID for each Transaction.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"flush()"),Object(o.b)("td",{parentName:"tr",align:null},"Ensure that all Writes have been persisted.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"ping()"),Object(o.b)("td",{parentName:"tr",align:null},"Extend the duration of a Transaction.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null}),Object(o.b)("td",{parentName:"tr",align:null},"Note that after a certain amount of idle time, the Transaction will automatically abort. This is to handle the case where the client has crashed and it is no longer appropriate to keep resources associated with the Transaction.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"checkStatus()"),Object(o.b)("td",{parentName:"tr",align:null},"Return the state of the Transaction. The Transaction can be in one of the following states: Open, Committing, Committed, Aborting or Aborted.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"commit()"),Object(o.b)("td",{parentName:"tr",align:null},"Append all of the Events written to the Transaction into the Stream. Either all of the Event data will be appended to the Stream or none of it will be.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"abort()"),Object(o.b)("td",{parentName:"tr",align:null},"Terminate the Transaction, the data written to the Transaction will be deleted.")))),Object(o.b)("h2",{id:"using-the-consolewriter-to-begin-and-commit-a-transaction"},"Using the ConsoleWriter to Begin and Commit a Transaction"),Object(o.b)("p",null,"All of the Transaction API is reflected in the ConsoleWriter's CLI command set."),Object(o.b)("p",null,"To begin a transaction, type BEGIN:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Begin Transaction")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"examples/someStream >begin\n346d8561-3fd8-40b6-8c15-9343eeea2992 >\n")),Object(o.b)("p",null,"When a Transaction is created, it returns a Transaction object parameterized to\nthe type of Event supported by the Stream. \xa0In the case of the ConsoleWriter,\nthe type of Event is a Java String."),Object(o.b)("p",null,"The command prompt changes to show the Transaction's id. \xa0Now any of the\nTransaction related commands can be issued (GET","_","TXN","_","ID, FLUSH, PING, COMMIT,\nABORT and STATUS). \xa0Note that the BEGIN command won't work because the\nConsoleWriter supports only one Transaction at a time (this is a limitation of\nthe app, not a limitation of Pravega). \xa0When the ConsoleWriter is in a\nTransactional context, the WRITE","_","EVENT (remember if you don't type a command,\nConsoleWriter assumes you want to write the text as an Event) or the\nWRITE","_","EVENT","_","RK will be written to the Transaction:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Write Events to a Transaction")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"346d8561-3fd8-40b6-8c15-9343eeea2992 >m1\n**** Wrote 'm1'\n346d8561-3fd8-40b6-8c15-9343eeea2992 >m2\n**** Wrote 'm2'\n346d8561-3fd8-40b6-8c15-9343eeea2992 >m3\n**** Wrote 'm3'\n")),Object(o.b)("p",null,"At this point, if you look at the Stream (by invoking the ConsoleReader app on\nthe Stream, for example), you won't see those Events written to the Stream."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Events not Written to the Stream (yet)")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"$ bin/consoleReader\n...\n******** Reading events from examples/someStream\n")),Object(o.b)("p",null,"But when a COMMIT command is given, causing the Transaction to commit:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Do the Commit")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"346d8561-3fd8-40b6-8c15-9343eeea2992 >commit\n**** Transaction commit completed.\n")),Object(o.b)("p",null,"\xa0those Events are appended to the Stream and are now all available:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"After commit, the Events are Visible")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"******** Reading events from examples/someStream\n'm1'\n'm2'\n'm3'\n")),Object(o.b)("h3",{id:"more-on-begin-transaction"},"More on Begin Transaction"),Object(o.b)("p",null,"The Begin Transaction (beginTxn()) operation takes three parameters\n(ConsoleWriter chooses some reasonable defaults so in the CLI these are\noptional):\xa0"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Param")),Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Discussion")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"transactionTimeout"),Object(o.b)("td",{parentName:"tr",align:null},"The amount of time a transaction should be allowed to run before it is automatically aborted by Pravega.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null}),Object(o.b)("td",{parentName:"tr",align:null},'This is also referred to as a "lease".')),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"maxExecutionTime"),Object(o.b)("td",{parentName:"tr",align:null},"The amount of time allowed between ping operations.")))))}b.isMDXComponent=!0}}]);