(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{155:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),o=(n(0),n(160)),i={title:"ReaderGroup Notifications"},c={unversionedId:"pravega/reader-group-notifications",id:"pravega/reader-group-notifications",isDocsHomePage:!1,title:"ReaderGroup Notifications",description:"\x3c!--",source:"@site/docs/pravega/reader-group-notifications.md",slug:"/pravega/reader-group-notifications",permalink:"/docs/docs/pravega/reader-group-notifications",editUrl:"https://github.com/claudiofahey/pravega/edit/docusaurus/documentation/src/docs/reader-group-notifications.md",version:"current"},s=[],p={toc:s};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ReaderGroup api supports different types of notifications. Currently, we\nhave two types implemented, but we plan to add more over time.\nThe types we currently support are the following:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Segment Notification"))),Object(o.b)("p",null,"A segment notification is triggered when the total number of segments managed by the\nreader group changes. During a scale operation segments can be split into\nmultiple or merged into some other segment causing the total number of segments\nto change. The total number of segments can also change when the configuration\nof the reader group changes, for example, when it adds or removes a stream."),Object(o.b)("p",null,"The method for subscribing to segment notifications is shown below"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"@Cleanup\nReaderGroupManager groupManager = new ReaderGroupManagerImpl(SCOPE, controller, clientFactory,\n        connectionFactory);\ngroupManager.createReaderGroup(GROUP_NAME, ReaderGroupConfig.builder().\n                                                            .stream(Stream.of(SCOPE, STREAM))\n                                                            .build());\n\ngroupManager.getReaderGroup(GROUP_NAME).getSegmentNotifier(executor).registerListener(segmentNotification -> {\n       int numOfReaders = segmentNotification.getNumOfReaders();\n       int segments = segmentNotification.getNumOfSegments();\n       if (numOfReaders < segments) {\n          //Scale up number of readers based on application capacity\n       } else {\n         //More readers available time to shut down some\n       }\n});\n\n")),Object(o.b)("p",null,"The application can register a listener to be notified of ",Object(o.b)("inlineCode",{parentName:"p"},"SegmentNotification")," using\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"registerListener")," api. This api takes\n",Object(o.b)("inlineCode",{parentName:"p"},"io.pravega.client.stream.notifications.Listener")," as a parameter. Here the\napplication can add custom logic to change the set of online readers according\nto the number of segments. For example, if the number of segments increases,\nthen application might consider increasing the number of online readers. If the\nnumber of segments instead decreases according to a segment notification, then the\napplication might want to change the set of online readers accordingly."),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"EndOfData Notification"))),Object(o.b)("p",null,"An end of data notifier is triggered when the readers have read all the data of\nthe stream(s) managed by the reader group. This is useful to process the stream\ndata with a batch job where the application wants to read data of sealed\nstream(s)."),Object(o.b)("p",null,"The method for subscribing to end of data notifications is shown below"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"@Cleanup\nReaderGroupManager groupManager = new ReaderGroupManagerImpl(SCOPE, controller, clientFactory,\n        connectionFactory);\ngroupManager.createReaderGroup(GROUP_NAME, ReaderGroupConfig.builder()\n                                                            .stream(Stream.of(SCOPE, SEALED_STREAM))\n                                                            .build());\n\ngroupManager.getReaderGroup(GROUP_NAME).getEndOfDataNotifier(executor).registerListener(notification -> {\n      //custom action e.g: close all readers\n});\n\n")),Object(o.b)("p",null,"The application can register a listener to be notified of ",Object(o.b)("inlineCode",{parentName:"p"},"EndOfDataNotification")," using\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"registerListener")," api. This api takes\n",Object(o.b)("inlineCode",{parentName:"p"},"io.pravega.client.stream.notifications.Listener")," as a parameter. Here the\napplication can add custom logic that can be invoked once all the data of the\nsealed streams are read."))}l.isMDXComponent=!0},160:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},g=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),g=r,f=u["".concat(i,".").concat(g)]||u[g]||d[g]||o;return n?a.a.createElement(f,c(c({ref:t},p),{},{components:n})):a.a.createElement(f,c({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"}}]);