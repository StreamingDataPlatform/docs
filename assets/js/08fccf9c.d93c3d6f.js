(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{155:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=s(a),u=n,d=b["".concat(o,".").concat(u)]||b[u]||m[u]||i;return a?r.a.createElement(d,l(l({ref:t},p),{},{components:a})):r.a.createElement(d,l({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},75:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(7),i=(a(0),a(155)),o={title:"Batch"},l={unversionedId:"flink-connectors/batch",id:"flink-connectors/batch",isDocsHomePage:!1,title:"Batch",description:"\x3c!--",source:"@site/docs/flink-connectors/batch.md",slug:"/flink-connectors/batch",permalink:"/docs/docs/flink-connectors/batch",editUrl:"https://github.com/claudiofahey/flink-connectors/edit/docusaurus/documentation/src/docs/batch.md",version:"current",sidebar:"mainSidebar",previous:{title:"Streaming",permalink:"/docs/docs/flink-connectors/streaming"},next:{title:"Table API",permalink:"/docs/docs/flink-connectors/table-api"}},c=[{value:"Table of Contents",id:"table-of-contents",children:[]},{value:"FlinkPravegaInputFormat",id:"flinkpravegainputformat",children:[{value:"Example",id:"example",children:[]},{value:"Parameters",id:"parameters",children:[]},{value:"Input Stream(s)",id:"input-streams",children:[]},{value:"StreamCuts",id:"streamcuts",children:[]},{value:"Parallelism",id:"parallelism",children:[]}]},{value:"FlinkPravegaOutputFormat",id:"flinkpravegaoutputformat",children:[{value:"Example",id:"example-1",children:[]},{value:"Parameter",id:"parameter",children:[]},{value:"Output Stream",id:"output-stream",children:[]},{value:"Parallelism",id:"parallelism-1",children:[]},{value:"Event Routing",id:"event-routing",children:[]}]},{value:"Serialization",id:"serialization",children:[]}],p={toc:c};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The Flink Connector library for Pravega makes it possible to use a Pravega Stream as a data source and data sink in a batch program.  See the below sections for details."),Object(i.b)("h2",{id:"table-of-contents"},"Table of Contents"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",{parentName:"p",href:"#flinkpravegainputformat"},"FlinkPravegaInputFormat")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#parameters"},"Parameters")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#input-streams"},"Input Stream(s)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#streamcuts"},"StreamCuts")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#parallelism"},"Parallelism")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",{parentName:"p",href:"#flinkpravegaoutputformat"},"FlinkPravegaOutputFormat")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#parameters"},"Parameters")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#output-stream"},"Output Stream")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#parallelism"},"Parallelism")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#event-routing"},"Event Routing")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",{parentName:"p",href:"#serialization"},"Serialization")))),Object(i.b)("h2",{id:"flinkpravegainputformat"},"FlinkPravegaInputFormat"),Object(i.b)("p",null,"A Pravega Stream may be used as a data source within a Flink batch program using an instance of\n",Object(i.b)("inlineCode",{parentName:"p"},"io.pravega.connectors.flink.FlinkPravegaInputFormat"),". The input format reads events of a stream as a ",Object(i.b)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-master/api/java/org/apache/flink/api/java/DataSet.html"},Object(i.b)("inlineCode",{parentName:"a"},"DataSet"))," (the basic abstraction of the Flink Batch API). This input format opens the stream for batch reading, which processes stream segments in ",Object(i.b)("strong",{parentName:"p"},"parallel")," and does not follow routing key order."),Object(i.b)("p",null,"Use the ",Object(i.b)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-master/api/java/org/apache/flink/api/java/ExecutionEnvironment.html#createInput-org.apache.flink.api.common.io.InputFormat-"},Object(i.b)("inlineCode",{parentName:"a"},"ExecutionEnvironment::createInput"))," method to open a Pravega Stream as a ",Object(i.b)("inlineCode",{parentName:"p"},"DataSet"),"."),Object(i.b)("h3",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-Java"},"// Define the Pravega configuration\nPravegaConfig config = PravegaConfig.fromParams(params);\n\n// Define the event deserializer\nDeserializationSchema<EventType> deserializer = ...\n\n// Define the input format based on a Pravega stream\nFlinkPravegaInputFormat<EventType> inputFormat = FlinkPravegaInputFormat.<EventType>builder()\n    .forStream(...)\n    .withPravegaConfig(config)\n    .withDeserializationSchema(deserializer)\n    .build();\n\nExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\nDataSource<EventType> dataSet = env.createInput(inputFormat, TypeInformation.of(EventType.class)).setParallelism(2);\n\n")),Object(i.b)("h3",{id:"parameters"},"Parameters"),Object(i.b)("p",null,"A builder API is provided to construct an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaInputFormat"),". See the table below for a summary of builder properties. Note that the builder accepts an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"PravegaConfig")," for common configuration properties. See the ",Object(i.b)("a",{parentName:"p",href:"/docs/docs/flink-connectors/configurations"},"configurations")," page for more information."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Method"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withPravegaConfig")),Object(i.b)("td",{parentName:"tr",align:null},"The Pravega client configuration, which includes connection info, security info, and a default scope.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"forStream")),Object(i.b)("td",{parentName:"tr",align:null},"The stream to be read from, with optional start and/or end position. May be called repeatedly to read numerous streams in parallel.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withDeserializationSchema")),Object(i.b)("td",{parentName:"tr",align:null},"The deserialization schema which describes how to turn byte messages into events.")))),Object(i.b)("h3",{id:"input-streams"},"Input Stream(s)"),Object(i.b)("p",null,"Each Pravega stream exists within a scope. A scope defines a namespace for streams such that names are unique. Across scopes, streams can have the same name. For example, if we have scopes ",Object(i.b)("inlineCode",{parentName:"p"},"A")," and ",Object(i.b)("inlineCode",{parentName:"p"},"B"),", then we can have a stream called ",Object(i.b)("inlineCode",{parentName:"p"},"myStream")," in each one of them. We cannot have a stream with the same name in the same scope. The builder API accepts both ",Object(i.b)("strong",{parentName:"p"},"qualified")," and ",Object(i.b)("strong",{parentName:"p"},"unqualified")," stream names."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"In qualified stream names, the scope is explicitly specified, e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"my-scope/my-stream"),"."),Object(i.b)("li",{parentName:"ul"},"In unqualified stream names are assumed to refer to the default scope as set in the ",Object(i.b)("inlineCode",{parentName:"li"},"PravegaConfig"),".\nSee the ",Object(i.b)("a",{parentName:"li",href:"/docs/docs/flink-connectors/configurations"},"configurations")," page for more information on default scope.")),Object(i.b)("p",null,"A stream may be specified in one of three ways:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"As a string containing a qualified name, in the form ",Object(i.b)("inlineCode",{parentName:"li"},"scope/stream"),"."),Object(i.b)("li",{parentName:"ol"},"As a string containing an unqualified name, in the form ",Object(i.b)("inlineCode",{parentName:"li"},"stream"),".  Such streams are resolved to the default scope."),Object(i.b)("li",{parentName:"ol"},"As an instance of ",Object(i.b)("inlineCode",{parentName:"li"},"io.pravega.client.stream.Stream"),", e.g. ",Object(i.b)("inlineCode",{parentName:"li"},'Stream.of("my-scope", "my-stream")'),".")),Object(i.b)("p",null,"Multiple streams can be passed as parameter option (using the builder API). The ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/client/src/main/java/io/pravega/client/batch/BatchClient.java"},Object(i.b)("inlineCode",{parentName:"a"},"BatchClient"))," implementation is capable of reading from numerous streams in parallel, even across scopes."),Object(i.b)("h3",{id:"streamcuts"},"StreamCuts"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"StreamCut")," represents a specific position in a Pravega Stream, which may be obtained from various API interactions with the Pravega client. The ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/client/src/main/java/io/pravega/client/batch/BatchClient.java"},Object(i.b)("inlineCode",{parentName:"a"},"BatchClient"))," accepts a ",Object(i.b)("inlineCode",{parentName:"p"},"StreamCut")," as the start and/or end position of a given stream.  For further reading on StreamCuts, please refer to documentation on ",Object(i.b)("a",{parentName:"p",href:"http://pravega.io/docs/latest/streamcuts/"},"StreamCut")," and ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-samples/tree/master/pravega-client-examples/src/main/java/io/pravega/example/streamcuts"},"sample code"),"."),Object(i.b)("p",null,"If stream cuts are not provided then the default start position requested is assumed to be the earliest available data in the stream and the default end position is assumed to be all available data in that stream as of when the job execution begins."),Object(i.b)("h3",{id:"parallelism"},"Parallelism"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaInputFormat")," supports parallelization. Use the ",Object(i.b)("inlineCode",{parentName:"p"},"setParallelism")," method of ",Object(i.b)("inlineCode",{parentName:"p"},"DataSet")," to configure the number of parallel instances to execute.  The parallel instances consume the stream in a coordinated manner, each consuming one or more stream segments."),Object(i.b)("h2",{id:"flinkpravegaoutputformat"},"FlinkPravegaOutputFormat"),Object(i.b)("p",null,"A Pravega Stream may be used as a data sink within a Flink batch program using an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"io.pravega.connectors.flink.FlinkPravegaOutputFormat"),". The ",Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaOutputFormat")," can be supplied as a sink to the ",Object(i.b)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-master/api/java/org/apache/flink/api/java/DataSet.html#output-org.apache.flink.api.common.io.OutputFormat-"},Object(i.b)("inlineCode",{parentName:"a"},"DataSet"))," (the basic abstraction of the Flink Batch API)."),Object(i.b)("h3",{id:"example-1"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'// Define the Pravega configuration\nPravegaConfig config = PravegaConfig.fromParams(params);\n\n// Define the event serializer\nSerializationSchema<EventType> serializer = ...\n\n// Define the event router for selecting the Routing Key\nPravegaEventRouter<EventType> router = ...\n\n// Define the input format based on a Pravega Stream\nFlinkPravegaOutputFormat<EventType> outputFormat = FlinkPravegaOutputFormat.<EventType>builder()\n    .forStream(...)\n    .withPravegaConfig(config)\n    .withSerializationSchema(serializer)\n    .withEventRouter(router)\n    .build();\n\nExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\nCollection<EventType> inputData = Arrays.asList(...);\nenv.fromCollection(inputData)\n   .output(outputFormat);\nenv.execute("...");\n')),Object(i.b)("h3",{id:"parameter"},"Parameter"),Object(i.b)("p",null,"A builder API is provided to construct an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaOutputFormat"),". See the table below for a summary of builder properties.  Note that the builder accepts an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"PravegaConfig")," for common configuration properties.  See the ",Object(i.b)("a",{parentName:"p",href:"/docs/docs/flink-connectors/configurations"},"configurations")," page for more information."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Method"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withPravegaConfig")),Object(i.b)("td",{parentName:"tr",align:null},"The Pravega client configuration, which includes connection info, security info, and a default scope.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"forStream")),Object(i.b)("td",{parentName:"tr",align:null},"The stream to be written to.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withSerializationSchema")),Object(i.b)("td",{parentName:"tr",align:null},"The serialization schema which describes how to turn events into byte messages.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"withEventRouter")),Object(i.b)("td",{parentName:"tr",align:null},"The router function which determines the Routing Key for a given event.")))),Object(i.b)("h3",{id:"output-stream"},"Output Stream"),Object(i.b)("p",null,"Each stream in Pravega is contained by a scope.  A scope acts as a namespace for one or more streams. The builder API accepts both ",Object(i.b)("strong",{parentName:"p"},"qualified")," and ",Object(i.b)("strong",{parentName:"p"},"unqualified")," stream names.  "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"In qualified, the scope is explicitly specified, e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"my-scope/my-stream"),".  "),Object(i.b)("li",{parentName:"ul"},"In Unqualified stream names are assumed to refer to the default scope as set in the ",Object(i.b)("inlineCode",{parentName:"li"},"PravegaConfig"),".")),Object(i.b)("p",null,"A stream may be specified in one of three ways:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"As a string containing a qualified name, in the form ",Object(i.b)("inlineCode",{parentName:"li"},"scope/stream"),"."),Object(i.b)("li",{parentName:"ol"},"As a string containing an unqualified name, in the form ",Object(i.b)("inlineCode",{parentName:"li"},"stream"),". Such streams are resolved to the default scope."),Object(i.b)("li",{parentName:"ol"},"As an instance of ",Object(i.b)("inlineCode",{parentName:"li"},"io.pravega.client.stream.Stream"),", e.g. ",Object(i.b)("inlineCode",{parentName:"li"},'Stream.of("my-scope", "my-stream")'),".")),Object(i.b)("h3",{id:"parallelism-1"},"Parallelism"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"FlinkPravegaWriter")," supports parallelization. Use the ",Object(i.b)("inlineCode",{parentName:"p"},"setParallelism")," method to configure the number of parallel instances to execute."),Object(i.b)("h3",{id:"event-routing"},"Event Routing"),Object(i.b)("p",null,"Every event written to a Pravega Stream has an associated Routing Key.  The Routing Key is the basis for event ordering. See the ",Object(i.b)("a",{parentName:"p",href:"http://pravega.io/docs/latest/pravega-concepts/#events"},"Pravega Concepts")," for details."),Object(i.b)("p",null,"To establish the routing key for each event, provide an implementation of ",Object(i.b)("inlineCode",{parentName:"p"},"io.pravega.connectors.flink.PravegaEventRouter")," when constructing the writer."),Object(i.b)("h2",{id:"serialization"},"Serialization"),Object(i.b)("p",null,"Please, see the ",Object(i.b)("a",{parentName:"p",href:"/docs/docs/flink-connectors/serialization"},"serialization")," page for more information on how to use the ",Object(i.b)("em",{parentName:"p"},"serializer")," and ",Object(i.b)("em",{parentName:"p"},"deserializer"),"."))}s.isMDXComponent=!0}}]);