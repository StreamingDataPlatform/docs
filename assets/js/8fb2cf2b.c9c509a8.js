(window.webpackJsonp=window.webpackJsonp||[]).push([[48,30],{118:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),o=(n(0),n(168)),i=n(58),c={title:"Tutorial 2 - Reading from Pravega"},p={unversionedId:"spark-connectors/tutorial-2-reading-from-pravega",id:"spark-connectors/tutorial-2-reading-from-pravega",isDocsHomePage:!1,title:"Tutorial 2 - Reading from Pravega",description:"\x3c!--",source:"@site/docs/spark-connectors/tutorial-2-reading-from-pravega.md",slug:"/spark-connectors/tutorial-2-reading-from-pravega",permalink:"/docs/docs/spark-connectors/tutorial-2-reading-from-pravega",editUrl:"https://github.com/pravega/spark-connectors/edit/docusaurus/documentation/src/docs/tutorial-2-reading-from-pravega.md",version:"current",sidebar:"mainSidebar",previous:{title:"Tutorial 1 - Writing to Pravega",permalink:"/docs/docs/spark-connectors/tutorial-1-writing-to-pravega"},next:{title:"Samples",permalink:"/docs/docs/spark-connectors/samples"}},l=[{value:"Code Walkthrough",id:"code-walkthrough",children:[]}],s={toc:l};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In this tutorial, we'll use ",Object(o.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-samples/blob/spark-connector-examples/spark-connector-examples/src/main/python/stream_pravega_to_console.py"},"stream_pravega_to_console.py"),"."),Object(o.b)("h2",{id:"code-walkthrough"},"Code Walkthrough"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The beginning of this script is the same as ",Object(o.b)("inlineCode",{parentName:"p"},"stream_generated_data_to_pravega.py"),". Now we are reading from a Pravega stream source."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="stream_pravega_to_console.py"',title:'"stream_pravega_to_console.py"'},'(spark\n    .readStream\n    .format("pravega")\n    .option("controller", controller)\n    .option("allow_create_scope", allowCreateScope)\n    .option("scope", scope)\n    .option("stream", "streamprocessing1")\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The first time that this Spark application runs, we can choose where in the stream to begin reading from. We can choose ",Object(o.b)("inlineCode",{parentName:"p"},"earliest")," or ",Object(o.b)("inlineCode",{parentName:"p"},"latest"),". If the previous execution of this Spark application saved a checkpoint in the checkpoint directory, then this option is ignored and the application will resume from exactly where it left off."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-python"},'    .option("start_stream_cut", "earliest")\n    .load()\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"When reading from a Pravega stream, the following columns will be available:"),Object(o.b)("table",{parentName:"li"},Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},"Column name"),Object(o.b)("th",{parentName:"tr",align:null},"Data Type"),Object(o.b)("th",{parentName:"tr",align:null},"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"event"),Object(o.b)("td",{parentName:"tr",align:null},"binary"),Object(o.b)("td",{parentName:"tr",align:null},"The serialized event. If a string was written, this will be a UTF-8 string.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"scope"),Object(o.b)("td",{parentName:"tr",align:null},"string"),Object(o.b)("td",{parentName:"tr",align:null},"The name of the Pravega scope.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"stream"),Object(o.b)("td",{parentName:"tr",align:null},"string"),Object(o.b)("td",{parentName:"tr",align:null},"The name of the Pravega scope.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"segment_id"),Object(o.b)("td",{parentName:"tr",align:null},"long"),Object(o.b)("td",{parentName:"tr",align:null},"The ID of the Pravega segment containing this event.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"offset"),Object(o.b)("td",{parentName:"tr",align:null},"long"),Object(o.b)("td",{parentName:"tr",align:null},"The byte offset in the Pravega segment that contains this event."))))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Since we wrote a string event, we need to cast it from a UTF-8 string to a Spark string."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-python"},'    .selectExpr("cast(event as string)", "scope", "stream", "segment_id", "offset")\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Next, we write the output to the console. We will see the result in the Spark driver log."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-python"},'    .writeStream\n    .trigger(processingTime="3 seconds")\n    .outputMode("append")\n    .format("console")\n    .option("truncate", "false")\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Stateful operations in Spark must periodically write checkpoints which can be used to recover from failures. The checkpoint directory identified by the environment variable ",Object(o.b)("inlineCode",{parentName:"p"},"CHECKPOINT_DIR")," should be used for this purpose. It should be highly available until the Spark application is deleted. This should be used even for Spark applications which do not use Pravega."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-python"},'    .option("checkpointLocation", checkPointLocation)\n')))),Object(o.b)(i.default,{mdxType:"CheckpointDir"}),Object(o.b)("p",null,"To run this application, refer to the steps in ",Object(o.b)("a",{parentName:"p",href:"/docs/docs/spark-connectors/tutorial-1-writing-to-pravega#running-the-application-locally"},"Tutorial 1"),"."))}b.isMDXComponent=!0},168:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),s=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),b=s(n),d=a,u=b["".concat(i,".").concat(d)]||b[d]||m[d]||o;return n?r.a.createElement(u,c(c({ref:t},l),{},{components:n})):r.a.createElement(u,c({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),o=(n(0),n(168)),i={},c={unversionedId:"snippets/spark-connectors/checkpoint-dir",id:"snippets/spark-connectors/checkpoint-dir",isDocsHomePage:!1,title:"checkpoint-dir",description:"When deploying on SDP, the CHECKPOINT_DIR environment variable is automatically set to an appropriate location.",source:"@site/docs/snippets/spark-connectors/checkpoint-dir.md",slug:"/snippets/spark-connectors/checkpoint-dir",permalink:"/docs/docs/snippets/spark-connectors/checkpoint-dir",editUrl:null,version:"current"},p=[],l={toc:p};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Streaming Data Platform")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"When deploying on SDP, the ",Object(o.b)("inlineCode",{parentName:"p"},"CHECKPOINT_DIR")," environment variable is automatically set to an appropriate location."))))}s.isMDXComponent=!0}}]);