(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{158:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return d}));var r=a(3),o=a(7),n=(a(0),a(169)),i={title:"Solution Architecture"},s={unversionedId:"sdp/edge/solution-architecture",id:"sdp/edge/solution-architecture",isDocsHomePage:!1,title:"Solution Architecture",description:"The following diagram shows the main components of a typical SDP on Edge solution. The arrows indicate the direction of the primary data flow. To simplify the diagram, we are only showing one server for each location. For high availability and scalability in a production environment, three servers should be used.",source:"@site/docs/sdp/edge/solution-architecture.md",slug:"/sdp/edge/solution-architecture",permalink:"/docs/docs/sdp/edge/solution-architecture",editUrl:null,version:"current",sidebar:"mainSidebar",previous:{title:"SDP on Edge",permalink:"/docs/docs/sdp/edge/overview"},next:{title:"Pravega Sensor Collector",permalink:"/docs/docs/sdp/edge/pravega-sensor-collector"}},c=[{value:"JSON and Serialization",id:"json-and-serialization",children:[]}],l={toc:c};function d(e){var t=e.components,i=Object(o.a)(e,["components"]);return Object(n.b)("wrapper",Object(r.a)({},l,i,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"The following diagram shows the main components of a typical SDP on Edge solution. The arrows indicate the direction of the primary data flow. To simplify the diagram, we are only showing one server for each location. For high availability and scalability in a production environment, three servers should be used."),Object(n.b)("p",null,Object(n.b)("img",{alt:"Solution overview",src:a(246).default})),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Micro-edge (a.k.a. edge gateway): The micro-edge is a general-purpose computer closest to the sensors. This is typically a small computer with 4 GB of RAM, an x86 64-bit CPU, and a Linux operating system. SSD storage can be utilized for storing sensor data until it can be sent to the edge."),Object(n.b)("ol",{parentName:"li"},Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Sensors: A variety of sensors can be utilized, including accelerometers and network interface card (NIC) counters.")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},Object(n.b)("a",{parentName:"p",href:"/docs/docs/sdp/edge/pravega-sensor-collector"},"Pravega Sensor Collector"),": Pravega Sensor Collector is an application that runs on a micro-edge computer. It continuously reads data from directly connected sensors and writes the data to a Pravega stream at the edge.")))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Edge: The edge is a small computer cluster that aggregates data from multiple micro-edge devices. In a highly available configuration, three or more servers form a Kubernetes cluster, and a distributed file system or object store is used to store Pravega streams. A single server can be used if high availability is not required. Many micro-edge computers connect to a single edge cluster."),Object(n.b)("ol",{parentName:"li"},Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Pravega: Pravega provides a new storage abstraction \u2013 a stream \u2013 for continuous and unbounded data. A Pravega stream is a durable, elastic, append-only, unbounded sequence of bytes with good performance and strong consistency. Pravega is cloud-native and open-source.")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Long-term storage: Pravega uses two-tier storage to provide low-latency durable writes and cost-efficient long-term storage to serve historical reads. In a highly-available configuration, long-term storage must be a distributed file system such as HDFS, Dell EMC PowerScale, or Dell EMC ECS.")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Apache Flink: Apache Flink\xae is an open-source stream processing framework for distributed, high-performing, always-available, and accurate data streaming applications. For this solution, we use a Flink streaming job from ",Object(n.b)("a",{parentName:"p",href:"/docs/docs/sdp/edge/pravega-flink-tools"},"Pravega Flink Tools")," to copy stream events from the edge to the cloud continuously.")))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Cloud / Data Center: As an optional part of this solution, in the cloud or an on-premises data center, we collect and process a subset of the stream data collected at the edge. We can run the same software stack in the edge and in a data center. Alternatively, if stream processing is not needed in the cloud, we only need storage such as S3, HDFS, or NFS."))),Object(n.b)("h2",{id:"json-and-serialization"},"JSON and Serialization"),Object(n.b)("p",null,"The Pravega Event Stream API allows applications to write and read events consisting of arbitrary sequences of bytes of up to 8 MiB. The process of converting an in-memory object to a sequence of bytes that can be persisted is called serialization. JSON is among the most common and easy to use serialization formats. Nearly all data processing tools and languages have good built-in support for JSON. Additionally, JSON is easy for humans to read without any special tools. Pravega Sensor Collector and Pravega Flink Tools use JSON for events in Pravega."))}d.isMDXComponent=!0},169:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return m}));var r=a(0),o=a.n(r);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=o.a.createContext({}),d=function(e){var t=o.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=d(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(a),b=r,m=u["".concat(i,".").concat(b)]||u[b]||p[b]||n;return a?o.a.createElement(m,s(s({ref:t},l),{},{components:a})):o.a.createElement(m,s({ref:t},l))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,i=new Array(n);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<n;l++)i[l]=a[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},246:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/solution-overview-320a67ebfbb377ddc309809b0e123863.png"}}]);