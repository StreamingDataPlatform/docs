(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{111:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return m}));var a=r(3),n=r(7),i=(r(0),r(147)),o={title:"Pravega Metrics"},c={unversionedId:"pravega/metrics",id:"pravega/metrics",isDocsHomePage:!1,title:"Pravega Metrics",description:"\x3c!--",source:"@site/docs/pravega/metrics.md",slug:"/pravega/metrics",permalink:"/docs/pravega/metrics",editUrl:"https://github.com/claudiofahey/pravega/edit/docusaurus/documentation/src/docs/metrics.md",version:"current",sidebar:"mainSidebar",previous:{title:"Running on AWS",permalink:"/docs/pravega/deployment/aws-install"},next:{title:"Implementation of Pravega Authentication/Authorization Plugin",permalink:"/docs/pravega/auth/auth-plugin"}},s=[{value:"Metrics Service Provider \u2014 Interface StatsProvider",id:"metrics-service-provider--interface-statsprovider",children:[]},{value:"Metric Logger \u2014 Interface StatsLogger",id:"metric-logger--interface-statslogger",children:[]},{value:"Metric Sub Logger \u2014 OpStatsLogger",id:"metric-sub-logger--opstatslogger",children:[]},{value:"Metric Logger \u2014 Interface DynamicLogger",id:"metric-logger--interface-dynamiclogger",children:[]},{value:"Example for Dynamic Counter and OpStatsLogger(Timer)",id:"example-for-dynamic-counter-and-opstatsloggertimer",children:[]},{value:"Example for Dynamic Gauge",id:"example-for-dynamic-gauge",children:[]},{value:"Example for Dynamic Meter",id:"example-for-dynamic-meter",children:[]},{value:"Metrics in JVM",id:"metrics-in-jvm",children:[]},{value:"Metrics in Segment Store Service",id:"metrics-in-segment-store-service",children:[]},{value:"Metrics in Controller Service",id:"metrics-in-controller-service",children:[]}],l={toc:s};function m(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metrics-interfaces-and-examples-usage"},"Metrics Interfaces and Examples Usage"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metrics-service-provider--interface-statsprovider"},"Metrics Service Provider \u2014 Interface StatsProvider")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metric-logger--interface-statslogger"},"Metric Logger \u2014 Interface StatsLogger")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metric-sub-logger--opstatslogger"},"Metric Sub Logger \u2014 OpStatsLogger")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metric-logger--interface-dynamiclogger"},"Metric Logger \u2014 Interface DynamicLogger")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#example-for-starting-a-metric-service"},"Example for Starting a Metric Service"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#example-for-dynamic-counter-and-opstatsloggertimer"},"Example for Dynamic Counter and OpStatsLogger(Timer)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#example-for-dynamic-gauge"},"Example for Dynamic Gauge")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#example-for-dynamic-meter"},"Example for Dynamic Meter")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metric-registries-and-configurations"},"Metric Registries and Configurations")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#creating-own-metrics"},"Creating Own Metrics")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metrics-naming-conventions"},"Metrics Naming Conventions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#available-metrics-and-their-names"},"Available Metrics and Their Names"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metrics-in-jvm"},"Metrics in JVM")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metrics-in-segment-store-service"},"Metrics in Segment Store Service")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metrics-in-controller-service"},"Metrics in Controller Service")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#resources"},"Resources"))),Object(i.b)("p",null,"In the Pravega Metrics Framework, we use ",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs"},"Micrometer Metrics")," as the underlying library, and provide our own API to make it easier to use."),Object(i.b)("h1",{id:"metrics-interfaces-and-examples-usage"},"Metrics Interfaces and Examples Usage"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"StatsProvider"),": The Statistics Provider which provides the whole Metric service.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"StatsLogger"),": The Statistics Logger is where the required Metrics (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counter"),"/",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge"),"/",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_timers"},"Timer"),"/",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_distribution_summaries"},"Distribution Summary"),") are registered.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"OpStatsLogger"),": The Operation Statistics Logger is a sub-metric for the complex ones (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_timers"},"Timer"),"/",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_distribution_summaries"},"Distribution Summary"),"). It is included in ",Object(i.b)("inlineCode",{parentName:"p"},"StatsLogger")," and ",Object(i.b)("inlineCode",{parentName:"p"},"DynamicLogger"),"."))),Object(i.b)("h2",{id:"metrics-service-provider--interface-statsprovider"},"Metrics Service Provider \u2014 Interface StatsProvider"),Object(i.b)("p",null,"Pravega Metric Framework is initiated using the ",Object(i.b)("inlineCode",{parentName:"p"},"StatsProvider")," interface: it provides the ",Object(i.b)("em",{parentName:"p"},"start")," and ",Object(i.b)("em",{parentName:"p"},"stop")," methods for the Metric service. It also provides ",Object(i.b)("inlineCode",{parentName:"p"},"startWithoutExporting()")," for testing purpose, which only stores metrics in memory without exporting them to external systems. Currently we have support for ",Object(i.b)("a",{parentName:"p",href:"https://github.com/b/statsd_spec"},"StatsD")," and ",Object(i.b)("a",{parentName:"p",href:"https://www.influxdata.com/"},"InfluxDB")," registries."),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/shared/metrics/src/main/java/io/pravega/shared/metrics/StatsProvider.java"},"StatsProvider")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"start()"),": Initializes the ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_registry"},"MetricRegistry")," and Reporters for our Metric service."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"startWithoutExporting()"),": Initializes ",Object(i.b)("inlineCode",{parentName:"li"},"SimpleMeterRegistry")," that holds the latest value of each Meter in memory and does not export the data anywhere, typically for unit tests."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"close()"),": Shuts down the Metric Service."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"createStatsLogger()"),": Create a ",Object(i.b)("inlineCode",{parentName:"li"},"StatsLogger")," instance which is used to register and return metric objects. Application code could then perform metric operations directly with the returned metric objects."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"createDynamicLogger()"),": Creates a Dynamic Logger.")),Object(i.b)("h2",{id:"metric-logger--interface-statslogger"},"Metric Logger \u2014 Interface StatsLogger"),Object(i.b)("p",null,"This interface can be used to register the required metrics for simple types like ",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counter")," and ",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge")," and some complex statistics type of Metric like ",Object(i.b)("inlineCode",{parentName:"p"},"OpStatsLogger"),", through which we provide ",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_timers"},"Timer")," and\n",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_distribution_summaries"},"Distribution Summary"),"."),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/shared/metrics/src/main/java/io/pravega/shared/metrics/StatsLogger.java"},"StatsLogger")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"createStats()"),": Register and get a ",Object(i.b)("inlineCode",{parentName:"li"},"OpStatsLogger"),", which is used for complex type of metrics. Notice the optional metric tags."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"createCounter()"),": Register and get a ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_counters"},"Counter")," Metric."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"createMeter()"),": Create and register a ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_meters"},"Meter")," Metric."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"registerGauge()"),": Register a ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge")," Metric."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"createScopeLogger()"),": Create the ",Object(i.b)("inlineCode",{parentName:"li"},"StatsLogger")," under the given scope name.")),Object(i.b)("h2",{id:"metric-sub-logger--opstatslogger"},"Metric Sub Logger \u2014 OpStatsLogger"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"OpStatsLogger")," can be used if the user is interested in measuring the latency of operations like ",Object(i.b)("inlineCode",{parentName:"p"},"CreateSegment")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ReadSegment"),". Further, we could use it to record the ",Object(i.b)("em",{parentName:"p"},"number of operation")," and ",Object(i.b)("em",{parentName:"p"},"time/duration")," of each operation."),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/shared/metrics/src/main/java/io/pravega/shared/metrics/OpStatsLogger.java"},"OpStatsLogger")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reportSuccessEvent()"),": Used to track the ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_timers"},"Timer")," of a successful operation and will record the latency in nanoseconds in the required metric."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reportFailEvent()"),": Used to track the ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_timers"},"Timer")," of a failed operation and will record the latency in nanoseconds in required metric.  "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reportSuccessValue()"),": Used to track the ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_histograms_and_percentiles"},"Histogram")," of a success value."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reportFailValue()"),": Used to track the ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_histograms_and_percentiles"},"Histogram")," of a failed value."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"toOpStatsData()"),":  Used to support the ",Object(i.b)("a",{parentName:"li",href:"https://metrics.dropwizard.io/3.1.0/manual/core/#jmx"},"JMX")," Reporters and unit tests."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"clear"),": Used to clear the stats for this operation.")),Object(i.b)("h2",{id:"metric-logger--interface-dynamiclogger"},"Metric Logger \u2014 Interface DynamicLogger"),Object(i.b)("p",null,"The following is an example of a simple interface that exposes only the simple type metrics: (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counter"),"/",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge"),"/",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_meters"},"Meter"),")."),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/shared/metrics/src/main/java/io/pravega/shared/metrics/DynamicLogger.java"},"DynamicLogger")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"incCounterValue()"),": Increases the ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_counters"},"Counter")," with the given value. Notice the optional metric tags."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"updateCounterValue()"),": Updates the ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_counters"},"Counter")," with the given value."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"freezeCounter()"),": Notifies that, the ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_counters"},"Counter")," will not be updated."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reportGaugeValue()"),": Reports the ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge")," value."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"freezeGaugeValue()"),": Notifies that, the ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge")," value will not be updated."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"recordMeterEvents()"),": Records the occurrences of a given number of events in ",Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs/concepts#_meters"},"Meter"),".")),Object(i.b)("h1",{id:"example-for-starting-a-metric-service"},"Example for Starting a Metric Service"),Object(i.b)("p",null,"This example is from ",Object(i.b)("inlineCode",{parentName:"p"},"io.pravega.segmentstore.server.host.ServiceStarter"),". The code for this example can be found ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/ServiceStarter.java"},"here"),". It starts Pravega Segment Store service and the Metrics Service is started as a sub service."),Object(i.b)("h2",{id:"example-for-dynamic-counter-and-opstatsloggertimer"},"Example for Dynamic Counter and OpStatsLogger(Timer)"),Object(i.b)("p",null,"This is an example from ",Object(i.b)("inlineCode",{parentName:"p"},"io.pravega.segmentstore.server.host.stat.SegmentStatsRecorderImpl.java"),". The code for this example can be found ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/stat/SegmentStatsRecorderImpl.java"},"here"),". In the class ",Object(i.b)("inlineCode",{parentName:"p"},"PravegaRequestProcessor"),", we have registered two metrics:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"one Timer (",Object(i.b)("inlineCode",{parentName:"li"},"createStreamSegment"),")"),Object(i.b)("li",{parentName:"ul"},"one dynamic counter (",Object(i.b)("inlineCode",{parentName:"li"},"dynamicLogger"),")")),Object(i.b)("p",null,"From the above example, we can see the required steps to register and use dynamic counter:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Get a dynamic logger from MetricsProvider:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"}," DynamicLogger dynamicLogger = MetricsProvider.getDynamicLogger();\n"))),Object(i.b)("li",{parentName:"ol"},"Increase the counter by providing metric base name and optional tags associated with the metric.",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"```\n DynamicLogger dl = getDynamicLogger();\n dl.incCounterValue(globalMetricName(SEGMENT_WRITE_BYTES), dataLength);\n ...\n dl.incCounterValue(SEGMENT_WRITE_BYTES, dataLength, segmentTags(streamSegmentName));\n```\n")),"Here ",Object(i.b)("inlineCode",{parentName:"li"},"SEGMENT_WRITE_BYTES")," is the base name of the metric. Below are the two metrics associated with it:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The global Counter which has no tags associated."),Object(i.b)("li",{parentName:"ul"},"A Segment specific Counter which has a list of Segment tags associated.")),Object(i.b)("p",null,"Note that, the ",Object(i.b)("inlineCode",{parentName:"p"},"segmentTags")," is a method to generate tags based on fully qualified Segment name."),Object(i.b)("p",null,"The following are the required steps to register and use ",Object(i.b)("inlineCode",{parentName:"p"},"OpStatsLogger(Timer)"),":"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Get a ",Object(i.b)("inlineCode",{parentName:"p"},"StatsLogger")," from ",Object(i.b)("inlineCode",{parentName:"p"},"MetricsProvider"),"."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'  StatsLogger STATS_LOGGER = MetricsProvider.getStatsLogger("segmentstore");\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Register all the desired metrics through ",Object(i.b)("inlineCode",{parentName:"p"},"StatsLogger"),"."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"  @Getter(AccessLevel.PROTECTED)\n  final OpStatsLogger createStreamSegment = STATS_LOGGER.createStats(SEGMENT_CREATE_LATENCY);\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Use these metrics within code at the appropriate places where the values should be collected and recorded."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"  getCreateStreamSegment().reportSuccessEvent(elapsed);\n")),Object(i.b)("p",{parentName:"li"},"Here ",Object(i.b)("inlineCode",{parentName:"p"},"SEGMENT_CREATE_LATENCY")," is the name of this metric, and ",Object(i.b)("inlineCode",{parentName:"p"},"createStreamSegment")," is the metric object, which tracks operations of ",Object(i.b)("inlineCode",{parentName:"p"},"createSegment")," and we will get the time (i.e. time taken by each operation and other numbers computed based on them) for each ",Object(i.b)("inlineCode",{parentName:"p"},"createSegment")," operation happened."))),Object(i.b)("h2",{id:"example-for-dynamic-gauge"},"Example for Dynamic Gauge"),Object(i.b)("p",null,"This is an example from ",Object(i.b)("inlineCode",{parentName:"p"},"io.pravega.controller.metrics.StreamMetrics"),". In this class, we report\na Dynamic Gauge which represents the open Transactions of a Stream. The code for this example can be found ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/controller/src/main/java/io/pravega/controller/metrics/StreamMetrics.java"},"here"),"."),Object(i.b)("h2",{id:"example-for-dynamic-meter"},"Example for Dynamic Meter"),Object(i.b)("p",null,"This is an example from ",Object(i.b)("inlineCode",{parentName:"p"},"io.pravega.segmentstore.server.SegmentStoreMetrics"),". The code for this example can be found ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java"},"here"),". In the class ",Object(i.b)("inlineCode",{parentName:"p"},"SegmentStoreMetrics"),", we report a Dynamic Meter which represents the Segments created with a particular container."),Object(i.b)("h1",{id:"metric-registries-and-configurations"},"Metric Registries and Configurations"),Object(i.b)("p",null,"With Micrometer, each meter registry is responsible for both storage and exporting of metrics objects.\nIn order to have a unified interface, Micrometer provides the ",Object(i.b)("inlineCode",{parentName:"p"},"CompositeMeterRegistry")," for the application to interact with, ",Object(i.b)("inlineCode",{parentName:"p"},"CompositeMeterRegistry")," will forward metric operations to all the concrete registries bounded to it."),Object(i.b)("p",null,"Note that when metrics service ",Object(i.b)("inlineCode",{parentName:"p"},"start()"),", initially only a global registry (of type ",Object(i.b)("inlineCode",{parentName:"p"},"CompositeMeterRegistry"),") is provided, which will bind concrete registries (e.g. statsD, Influxdb) based on the configurations. If no registry is switched on in ",Object(i.b)("inlineCode",{parentName:"p"},"config"),", metrics service throws error to prevent the global registry runs into no-op mode."),Object(i.b)("p",null,"Mainly for testing purpose, metrics service can also ",Object(i.b)("inlineCode",{parentName:"p"},"startWithoutExporting()"),", where a ",Object(i.b)("inlineCode",{parentName:"p"},"SimpleMeterRegistry")," is bound to the global registry. ",Object(i.b)("inlineCode",{parentName:"p"},"SimpleMeterRegistry")," holds memory only storage but does not export metrics, makes it ideal for tests to verify metrics objects."),Object(i.b)("p",null,"Currently Pravega supports the following:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"StatsD registry in ",Object(i.b)("inlineCode",{parentName:"li"},"Telegraf")," flavor."),Object(i.b)("li",{parentName:"ul"},"Dimensional metrics data model (or metric tags)."),Object(i.b)("li",{parentName:"ul"},"UDP as Communication protocol."),Object(i.b)("li",{parentName:"ul"},"Direct InfluxDB connection.")),Object(i.b)("p",null,"The reporter could be configured using the ",Object(i.b)("inlineCode",{parentName:"p"},"MetricsConfig"),". Please refer to the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega/blob/master/shared/metrics/src/main/java/io/pravega/shared/metrics/MetricsConfig.java"},"example"),"."),Object(i.b)("h1",{id:"creating-own-metrics"},"Creating Own Metrics"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"When starting a Segment Store/Controller Service, start a Metric Service as a sub service. Please check ",Object(i.b)("a",{parentName:"p",href:"#example-for-starting-a-metric-service"},Object(i.b)("inlineCode",{parentName:"a"},"ServiceStarter.start()"))),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-java"}," public class AddMetrics {\n        MetricsProvider.initialize(Config.METRICS_CONFIG);\n        statsProvider.start(metricsConfig);\n        statsProvider = MetricsProvider.getMetricsProvider();\n        statsProvider.start();\n\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Create a new ",Object(i.b)("inlineCode",{parentName:"p"},"StatsLogger")," instance through the ",Object(i.b)("inlineCode",{parentName:"p"},"MetricsProvider.createStatsLogger(String loggerName)"),", and register metric using name, e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"STATS_LOGGER.createCounter(String name)"),"; and then update the metric object as appropriately in the code."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-java"},' static final StatsLogger STATS_LOGGER = MetricsProvider.getStatsLogger(); // <--- 1\n DynamicLogger dynamicLogger = MetricsProvider.getDynamicLogger();\n\n  static class Metrics { // < --- 2\n     //Using Stats Logger\n     static final String CREATE_STREAM = "stream_created";\n     static final OpStatsLogger CREATE_STREAM = STATS_LOGGER.createStats(CREATE_STREAM);\n     static final String SEGMENT_CREATE_LATENCY = "segmentstore.segment.create_latency_ms";\n     static final OpStatsLogger createStreamSegment = STATS_LOGGER.createStats(SEGMENT_CREATE_LATENCY);\n\n     //Using Dynamic Logger\n     static final String SEGMENT_READ_BYTES = "segmentstore.segment.read_bytes";  //Dynamic Counter\n     static final String OPEN_TRANSACTIONS = "controller.transactions.opened";    //Dynamic Gauge\n     ...\n   }\n\n //to report success or increment\n Metrics.CREATE_STREAM.reportSuccessValue(1); // < --- 3\n Metrics.createStreamSegment.reportSuccessEvent(timer.getElapsed());\n dynamicLogger.incCounterValue(Metrics.SEGMENT_READ_BYTES, 1);\n dynamicLogger.reportGaugeValue(OPEN_TRANSACTIONS, 0);\n\n //in case of failure\n Metrics.CREATE_STREAM.reportFailValue(1);\n Metrics.createStreamSegment.reportFailEvent(timer.getElapsed());\n\n //to freeze\n dynamicLogger.freezeCounter(Metrics.SEGMENT_READ_BYTES);\n dynamicLogger.freezeGaugeValue(OPEN_TRANSACTIONS);\n }\n\n')))),Object(i.b)("h1",{id:"metrics-naming-conventions"},"Metrics Naming Conventions"),Object(i.b)("p",null,"All metric names are in the following format:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"Metrics Prefix + Component Origin + Sub-Component (or Abstraction) + Metric Base Name\n")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Metric Prefix"),": By default ",Object(i.b)("inlineCode",{parentName:"p"},"pravega")," is configurable.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Component Origin"),": Indicates which component generates the metric, such as ",Object(i.b)("inlineCode",{parentName:"p"},"segmentstore"),", ",Object(i.b)("inlineCode",{parentName:"p"},"controller"),".")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Sub-Component (or Abstraction)"),": Indicates the second level component or abstraction, such as ",Object(i.b)("inlineCode",{parentName:"p"},"cache"),", ",Object(i.b)("inlineCode",{parentName:"p"},"transaction"),", ",Object(i.b)("inlineCode",{parentName:"p"},"storage"),".")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Metric Base Name"),": Indicates the ",Object(i.b)("inlineCode",{parentName:"p"},"read_latency_ms"),", ",Object(i.b)("inlineCode",{parentName:"p"},"create_count"),"."))),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"    pravega.segmentstore.segment.create_latency_ms\n")),Object(i.b)("p",null,"Following are some common combinations of component and sub-components (or abstractions) being used:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"segmentstore.segment"),": Metrics for individual Segments"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"segmentstore.storage"),": Metrics related to long-term storage (Tier 2)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"segmentstore.bookkeeper"),": Metrics related to Bookkeeper (Tier 1)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"segmentstore.container"),": Metrics for Segment Containers"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"segmentstore.thread_pool"),": Metrics for Segment Store thread pool"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"segmentstore.cache"),": Cache-related metrics"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"controller.stream"),": Metrics for operations on Streams (e.g., number of streams created)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"controller.segments"),": Metrics about Segments, per Stream (e.g., count, splits, merges)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"controller.transactions"),": Metrics related to Transactions (e.g., created, committed, aborted)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"controller.retention"),": Metrics related to data retention, per Stream (e.g., frequency, size of truncated data)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"controller.hosts"),": Metrics related to Pravega servers in the cluster (e.g., number of servers, failures)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"controller.container"),": Metrics related to Container lifecycle (e.g., failovers)")),Object(i.b)("p",null,"Following are the two types of metrics:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Global Metric"),": ",Object(i.b)("inlineCode",{parentName:"p"},"_global")," metrics are reporting global values per component (Segment Store or Controller) instance, and further aggregation logic is needed if looking for Pravega cluster globals.\nFor instance, ",Object(i.b)("inlineCode",{parentName:"p"},"STORAGE_READ_BYTES")," can be classified as a Global metric.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Object-based Metric"),': Sometimes, we need to report metrics only based on specific objects, such as Streams or Segments. This kind of metrics use metric name as a base name in the file and are "dynamically" created based on the objects to be measured.\nFor instance, in ',Object(i.b)("inlineCode",{parentName:"p"},"CONTAINER_APPEND_COUNT")," we actually report multiple metrics, one per each\n",Object(i.b)("inlineCode",{parentName:"p"},"containerId")," measured, with different container tag (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},'["containerId", "3"]'),")."))),Object(i.b)("p",null,"There are cases in which we may want both a ",Object(i.b)("em",{parentName:"p"},"Global")," and ",Object(i.b)("em",{parentName:"p"},"Object-based")," versions for the same metric. For example, regarding ",Object(i.b)("inlineCode",{parentName:"p"},"SEGMENT_READ_BYTES")," we publish the Global version of it by adding ",Object(i.b)("inlineCode",{parentName:"p"},"_global")," suffix to the base name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"  segmentstore.segment.read_bytes_global\n")),Object(i.b)("p",null,"to track the globally total number of bytes read, as well as the per-segment version of it by using the same base name and also supplying additional Segment tags to report in a finer granularity the events read per Segment."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'segmentstore.segment.read_bytes, ["scope", "...", "stream", "...", "segment", "...", "epoch", "..."])\n')),Object(i.b)("h1",{id:"available-metrics-and-their-names"},"Available Metrics and Their Names"),Object(i.b)("h2",{id:"metrics-in-jvm"},"Metrics in JVM"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"}," jvm_gc_live_data_size\n jvm_gc_max_data_size\n jvm_gc_memory_allocated\n jvm_gc_memory_prompted\n jvm_gc_pause\n jvm_memory_committed\n jvm_memory_max\n jvm_memory_used\n jvm_threads_daemon\n jvm_threads_live\n jvm_threads_peak\n jvm_threads_states    \n\n")),Object(i.b)("h2",{id:"metrics-in-segment-store-service"},"Metrics in Segment Store Service"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Segment Store Read/Write latency of storage operations (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_histograms_and_percentiles"},"Histograms"),"):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"   segmentstore.segment.create_latency_ms\n   segmentstore.segment.read_latency_ms\n   segmentstore.segment.write_latency_ms\n\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Segment Store global and per-segment Read/Write Metrics (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counters"),"):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'   // Global counters\n      segmentstore.segment.read_bytes_global\n      segmentstore.segment.write_bytes_global\n      segmentstore.segment.write_events_global\n\n   // Per segment counters - all with tags {"scope", $scope, "stream", $stream, "segment", $segment, "epoch", $epoch}\n\n     segmentstore.segment.write_bytes\n     segmentstore.segment.read_bytes\n     segmentstore.segment.write_events\n'))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Segment Store cache Read/Write latency Metrics (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_histograms_and_percentiles"},"Histogram"),"):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"  segmentstore.cache.insert_latency_ms\n  segmentstore.cache.get_latency\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Segment Store cache Read/Write Metrics (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counters"),"):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"  segmentstore.cache.write_bytes\n  segmentstore.cache.read_bytes\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Segment Store cache size (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge"),") and generation spread (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_histograms_and_percentiles"},"Histogram"),") Metrics:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"  segmentstore.cache.size_bytes\n  segmentstore.cache.gen\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Tier 1 Storage ",Object(i.b)("inlineCode",{parentName:"p"},"DurableDataLog")," Read/Write latency and queuing Metrics (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_histograms_and_percentiles"},"Histogram"),"):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"  segmentstore.bookkeeper.total_write_latency_ms\n  segmentstore.bookkeeper.write_latency_ms\n  segmentstore.bookkeeper.write_queue_size\n  segmentstore.bookkeeper.write_queue_fill\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Tier 1 Storage ",Object(i.b)("inlineCode",{parentName:"p"},"DurableDataLog")," Read/Write (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counter"),") and per-container ledger count Metrics (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge"),"):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'  segmentstore.bookkeeper.write_bytes\n  segmentstore.bookkeeper.bookkeeper_ledger_count - with tag {"container", $containerId}\n\n'))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Tier 2 Storage Read/Write latency Metrics (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_histograms_and_percentiles"},"Histogram"),"):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"  segmentstore.storage.read_latency_ms\n  segmentstore.storage.write_latency_ms\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Tier 2 Storage Read/Write data and file creation Metrics (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counters"),"):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"  segmentstore.storage.read_bytes\n  segmentstore.storage.write_bytes\n  segmentstore.storage.create_count\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Segment Store container-specific operation Metrics:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'  // Histograms - all with tags {"container", $containerId}\n\n  segmentstore.container.process_operations.latency_ms\n  segmentstore.container.process_operations.batch_size\n  segmentstore.container.operation_queue.size\n  segmentstore.container.operation_processor.in_flight\n  segmentstore.container.operation_queue.wait_time\n  segmentstore.container.operation_processor.delay_ms\n  segmentstore.container.operation_commit.latency_ms\n  segmentstore.container.operation.latency_ms\n  segmentstore.container.operation_commit.metadata_txn_count\n  segmentstore.container.operation_commit.memory_latency_ms\n\n  // Gauge\n  segmentstore.container.operation.log_size\n'))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Segment Store operation processor (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counter"),') Metrics  - all with tags {"container", $containerId}.'),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"  // Counters/Meters\n  segmentstore.container.append_count\n  segmentstore.container.append_offset_count\n  segmentstore.container.update_attributes_count\n  segmentstore.container.get_attributes_count\n  segmentstore.container.read_count\n  segmentstore.container.get_info_count\n  segmentstore.container.create_segment_count\n  segmentstore.container.delete_segment_count\n  segmentstore.container.merge_segment_count\n  segmentstore.container.seal_count\n  segmentstore.container.truncate_count\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Segment Store active Segments (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge"),") and thread pool status (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_histograms_and_percentiles"},"Histogram"),") Metrics:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'  // Gauge - with tags {"container", $containerId}\n\n  segmentstore.active_segments\n\n  // Histograms\n  segmentstore.thread_pool.queue_size\n  segmentstore.thread_pool.active_threads\n')))),Object(i.b)("h2",{id:"metrics-in-controller-service"},"Metrics in Controller Service"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Controller Stream operation latency Metrics (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_histograms_and_percentiles"},"Histograms"),"):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"  controller.stream.created_latency_ms\n  controller.stream.sealed_latency_ms\n  controller.stream.deleted_latency_ms\n  controller.stream.updated_latency_ms\n  controller.stream.truncated_latency_ms\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Controller global and per-Stream operation Metrics (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counters"),"):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'  controller.stream.created\n  controller.stream.create_failed_global\n  controller.stream.create_failed - with tags {"scope", $scope, "stream", $stream}\n\n  controller.stream.sealed\n  controller.stream.seal_failed_global\n  controller.stream.seal_failed - with tags {"scope", $scope, "stream", $stream}\n')))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'controller.stream.deleted\ncontroller.stream.delete_failed_global\ncontroller.stream.delete_failed - with tags {"scope", $scope, "stream", $stream}\n\n\ncontroller.stream.updated_global\ncontroller.stream.updated - with tags {"scope", $scope, "stream", $stream}\n\ncontroller.stream.update_failed_global\ncontroller.stream.update_failed - with tags {"scope", $scope, "stream", $stream}\n\n\ncontroller.stream.truncated_global\ncontroller.stream.truncated - with tags {"scope", $scope, "stream", $stream}\ncontroller.stream.truncate_failed_global\ncontroller.stream.truncate_failed - with tags {"scope", $scope, "stream", $stream}\n')),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"\n- Controller Stream retention frequency ([Counter](https://micrometer.io/docs/concepts#_counters)) and truncated size ([Gauge](https://micrometer.io/docs/concepts#_gauges)) Metrics:\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'controller.retention.frequency - with tags {"scope", $scope, "stream", $stream}\n\ncontroller.retention.truncated_size - with tags {"scope", $scope, "stream", $stream}\n')),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'\n- Controller Stream Segment operations ([Counters](https://micrometer.io/docs/concepts#_counters)) and open/timed out Transactions on a Stream ([Gauge](https://micrometer.io/docs/concepts#_gauges)) Metrics  - all with tags {"scope", $scope, "stream", $stream}:\n')),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"controller.transactions.opened\ncontroller.transactions.timedout\ncontroller.segments.count\ncontroller.segment.splits\ncontroller.segment.merges\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"\n- Controller Transaction operation latency Metrics:\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"controller.transactions.created_latency_ms\ncontroller.transactions.committed_latency_ms\ncontroller.transactions.aborted_latency_ms\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'\n- Controller Transaction operation counter Metrics:\n  ```\n  controller.transactions.created_global\n  controller.transactions.created - with tags {"scope", $scope, "stream", $stream}\n  controller.transactions.create_failed_global\n  controller.transactions.create_failed - with tags {"scope", $scope, "stream", $stream}\n  controller.transactions.committed_global\n  controller.transactions.committed - with tags {"scope", $scope, "stream", $stream}\n  controller.transactions.commit_failed_global\n  controller.transactions.commit_failed - with tags {"scope", $scope, "stream", $stream}\n  controller.transactions.commit_failed - with tags {"scope", $scope, "stream", $stream,  "transaction", $txnId}\n  controller.transactions.aborted_global\n  controller.transactions.aborted - with tags {"scope", $scope, "stream", $stream}\n  controller.transactions.abort_failed_global\n  controller.transactions.abort_failed - with tags {"scope", $scope, "stream", $stream}\n  controller.transactions.abort_failed - with tags {"scope", $scope, "stream", $stream,  "transaction", $txnId}\n')),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Controller hosts available (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge"),") and host failure (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counter"),") Metrics:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'  controller.hosts.count\n  controller.hosts.failures_global\n  controller.hosts.failures - with tags {"host", $host}\n\n'))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Controller Container count per host (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_gauges"},"Gauge"),") and failover (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counter"),") Metrics:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'  controller.hosts.container_count\n  controller.container.failovers_global\n  controller.container.failovers - with tags {"container", $containerId}\n\n'))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Controller Zookeeper session expiration (",Object(i.b)("a",{parentName:"p",href:"https://micrometer.io/docs/concepts#_counters"},"Counter"),") metrics:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"controller.zookeeper.session_expiration\n")))),Object(i.b)("h1",{id:"resources"},"Resources"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://micrometer.io/docs"},"Micrometer Metrics")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/b/statsd_spec"},"Statsd_spec"))))}m.isMDXComponent=!0},147:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return d}));var a=r(0),n=r.n(a);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=n.a.createContext({}),m=function(e){var t=n.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=m(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},g=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=m(r),g=a,d=p["".concat(o,".").concat(g)]||p[g]||b[g]||i;return r?n.a.createElement(d,c(c({ref:t},l),{},{components:r})):n.a.createElement(d,c({ref:t},l))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=r[l];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,r)}g.displayName="MDXCreateElement"}}]);