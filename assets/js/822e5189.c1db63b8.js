(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{113:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return i})),n.d(a,"metadata",(function(){return c})),n.d(a,"toc",(function(){return l})),n.d(a,"default",(function(){return s}));var t=n(3),r=n(7),o=(n(0),n(169)),i={title:"Developer's Guide"},c={unversionedId:"flink-connectors/dev-guide",id:"flink-connectors/dev-guide",isDocsHomePage:!1,title:"Developer's Guide",description:"\x3c!--",source:"@site/docs/flink-connectors/dev-guide.md",slug:"/flink-connectors/dev-guide",permalink:"/docs/docs/flink-connectors/dev-guide",editUrl:"https://github.com/claudiofahey/flink-connectors/edit/docusaurus/documentation/src/docs/dev-guide.md",version:"current",sidebar:"mainSidebar",previous:{title:"Quick Start",permalink:"/docs/docs/flink-connectors/quickstart"},next:{title:"Streaming",permalink:"/docs/docs/flink-connectors/streaming"}},l=[{value:"Gradle",id:"gradle",children:[]},{value:"Maven",id:"maven",children:[]},{value:"Create an application that writes to Pravega",id:"create-an-application-that-writes-to-pravega",children:[]},{value:"Create an application that reads from Pravega",id:"create-an-application-that-reads-from-pravega",children:[]},{value:"Run in flink environment",id:"run-in-flink-environment",children:[]}],p={toc:l};function s(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},p,n,{components:a,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"flink-connector---dev-guide"},"Flink Connector - Dev Guide"),Object(o.b)("p",null,"Learn how to build your own applications that using Flink connector for Pravega."),Object(o.b)("h1",{id:"prerequisites"},"Prerequisites"),Object(o.b)("p",null,"To complete this guide, you need:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"JDK 8 or 11 installed with JAVA_HOME configured appropriately"),Object(o.b)("li",{parentName:"ul"},"Pravega running(Check ",Object(o.b)("a",{parentName:"li",href:"https://pravega.io/docs/latest/getting-started/"},"here")," to get started with Pravega)"),Object(o.b)("li",{parentName:"ul"},"Use Gradle or Maven")),Object(o.b)("h1",{id:"goal"},"Goal"),Object(o.b)("p",null,"In this guide, we will create a straightforward example application that writes data collected from an external network stream into a Pravega Stream and read the data from the Pravega Stream.\nWe recommend that you follow the instructions from ",Object(o.b)("a",{parentName:"p",href:"#Bootstrapping-the-Project"},"Bootstrapping project")," onwards to create the application step by step.\nHowever, you can go straight to the completed example at ",Object(o.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-samples/tree/master/flink-connector-examples"},"flink-connector-examples"),"."),Object(o.b)("h1",{id:"starting-flink"},"Starting Flink"),Object(o.b)("p",null,"Download Flink release and un-tar it. We use Flink 1.11.2 here. "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"$ tar -xzf flink-1.11.2-bin-scala_2.11.tgz\n$ cd flink-1.11.2-bin-scala_2.11\n")),Object(o.b)("p",null,"Start a cluster"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"$ ./bin/start-cluster.sh\nStarting cluster.\nStarting standalonesession daemon on host.\nStarting taskexecutor daemon on host.\n")),Object(o.b)("p",null,"When you are finished you can quickly stop the cluster and all running components."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"$ ./bin/stop-cluster.sh\n")),Object(o.b)("h1",{id:"bootstrapping-the-project"},"Bootstrapping the Project."),Object(o.b)("p",null,"Using Gradle or Maven to bootstrap a sample application against Pravega. Let's create a word count application as an example."),Object(o.b)("h3",{id:"gradle"},"Gradle"),Object(o.b)("p",null,"You can follow ",Object(o.b)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-stable/dev/project-configuration.html#gradle"},"here")," to create a gradle project."),Object(o.b)("p",null,"Add the below snippet to dependencies section of build.gradle in the app directory, connector dependencies should be part of the shadow jar. For flink connector dependency, we need to choose the connector which aligns the Flink major version and Scala version if you use Scala, along with the same Pravega version you run."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"compile group 'org.apache.flink', name: 'flink-streaming-java_2.12', version: '1.11.2'\n\nflinkShadowJar group: 'io.pravega', name: 'pravega-connectors-flink-1.11_2.12', version: '0.9.0'\n")),Object(o.b)("p",null,"Define custom configurations ",Object(o.b)("inlineCode",{parentName:"p"},"flinkShadowJar")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"// -> Explicitly define the // libraries we want to be included in the \"flinkShadowJar\" configuration!\nconfigurations {\n    flinkShadowJar // dependencies which go into the shadowJar\n\n    // always exclude these (also from transitive dependencies) since they are provided by Flink\n    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'\n    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'\n    flinkShadowJar.exclude group: 'org.slf4j'\n    flinkShadowJar.exclude group: 'org.apache.logging.log4j'\n}\n")),Object(o.b)("p",null,"Invoke ",Object(o.b)("inlineCode",{parentName:"p"},"gradle clean shadowJar")," to build/package the project. You will find a JAR file that contains your application, plus connectors and libraries that you may have added as dependencies to the application: ",Object(o.b)("inlineCode",{parentName:"p"},"build/libs/<project-name>-<version>-all.jar"),"."),Object(o.b)("h3",{id:"maven"},"Maven"),Object(o.b)("p",null,"You can check ",Object(o.b)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/project-configuration.html#maven-quickstart"},"maven-quickstart")," to find how to start with Maven."),Object(o.b)("p",null,"Add below dependencies into Maven POM, these dependencies should be part of the shadow jar"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"<dependency>\n  <groupId>org.apache.flink</groupId>\n  <artifactId>flink-streaming-java_2.12</artifactId>\n  <version>1.11.2</version>\n  <scope>provided</scope>\n</dependency>\n\n<dependency>\n  <groupId>io.pravega</groupId>\n  <artifactId>pravega-connectors-flink-1.11_2.12</artifactId>\n  <version>0.9.0</version>\n</dependency>\n")),Object(o.b)("p",null,"Invoke ",Object(o.b)("inlineCode",{parentName:"p"},"mvn clean package")," to build/package your project. You will find a JAR file that contains your application, plus connectors and libraries that you may have added as dependencies to the application: ",Object(o.b)("inlineCode",{parentName:"p"},"target/<artifact-id>-<version>.jar"),"."),Object(o.b)("h2",{id:"create-an-application-that-writes-to-pravega"},"Create an application that writes to Pravega"),Object(o.b)("p",null,"Let\u2019s first create a pravega configuration reading from arguments:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'ParameterTool params = ParameterTool.fromArgs(args);\nPravegaConfig pravegaConfig = PravegaConfig\n        .fromParams(params)\n        .withDefaultScope("my_scope");\n')),Object(o.b)("p",null,"Then we need to initialize the Flink execution environment"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n")),Object(o.b)("p",null,"Create a datastream that gets input data by connecting to the socket"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"DataStream<String> dataStream = env.socketTextStream(host, port);\n")),Object(o.b)("p",null,"A Pravega Stream may be used as a data sink within a Flink program using an instance of ",Object(o.b)("inlineCode",{parentName:"p"},"io.pravega.connectors.flink.FlinkPravegaWriter"),". We add an instance of the writer to the dataflow program:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'FlinkPravegaWriter<String> writer = FlinkPravegaWriter.<String>builder()\n        .withPravegaConfig(pravegaConfig)\n        .forStream(stream)\n        .withSerializationSchema(new SimpleStringSchema())\n        .build();\ndataStream.addSink(writer).name("Pravega Sink");\n')),Object(o.b)("p",null,"Then we execute the job within the Flink environment"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'env.execute("PravegaWriter");\n')),Object(o.b)("p",null,"Executing the above lines should ensure we have created a PravegaWriter job"),Object(o.b)("h2",{id:"create-an-application-that-reads-from-pravega"},"Create an application that reads from Pravega"),Object(o.b)("p",null,"Creating a Pravega Reader is similar to Pravega Writer\nFirst create a pravega configuration reading from arguments:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'ParameterTool params = ParameterTool.fromArgs(args);\nPravegaConfig pravegaConfig = PravegaConfig\n        .fromParams(params)\n        .withDefaultScope("my_scope");\n')),Object(o.b)("p",null,"Initialize the Flink execution environment"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n")),Object(o.b)("p",null,"A Pravega Stream may be used as a data source within a Flink streaming program using an instance of ",Object(o.b)("inlineCode",{parentName:"p"},"io.pravega.connectors.flink.FlinkPravegaReader"),". The reader reads a given Pravega Stream (or multiple streams) as a DataStream"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"FlinkPravegaReader<String> source = FlinkPravegaReader.<String>builder()\n        .withPravegaConfig(pravegaConfig)\n        .forStream(stream)\n        .withDeserializationSchema(new SimpleStringSchema())\n        .build();\n")),Object(o.b)("p",null,"Then create a datastream count each word over a 10 second time period"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'DataStream<WordCount> dataStream = env.addSource(source).name("Pravega Stream")\n        .flatMap(new Tokenizer()) // The Tokenizer() splits the line into words, and emit streams of "WordCount(word, 1)"\n        .keyBy("word")\n        .timeWindow(Time.seconds(10))\n        .sum("count");\n')),Object(o.b)("p",null,"Create an output sink to print to stdout for verification"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"dataStream.print();\n")),Object(o.b)("p",null,"Then we execute the job within the Flink environment"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'env.execute("PravegaReader");\n')),Object(o.b)("h2",{id:"run-in-flink-environment"},"Run in flink environment"),Object(o.b)("p",null,"First build your application. From Flink's perspective, the connector to Pravega is part of the streaming application (not part of Flink's core runtime), so the connector code must be part of the application's code artifact (JAR file). Typically, a Flink application is bundled as a ",Object(o.b)("inlineCode",{parentName:"p"},"fat-jar")," (also known as an ",Object(o.b)("inlineCode",{parentName:"p"},"uber-jar"),") , such that all its dependencies are embedded."),Object(o.b)("p",null,"Make sure your Pravega and Flink are running. Use the packaged jar, and run:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"flink run -c <classname> ${your-app}.jar --controller <pravega-controller-uri>\n")),Object(o.b)("h1",{id:"whats-next"},"What\u2019s next?"),Object(o.b)("p",null,"This guide covered the creation of a application that uses Flink connector to read and wirte from a pravega stream. However, there is much more. We recommend continuing the journey by going through ",Object(o.b)("a",{parentName:"p",href:"https://pravega.io/docs/latest/connectors/flink-connector/"},"flink connector documents")," and check other examples on ",Object(o.b)("a",{parentName:"p",href:"https://github.com/pravega/pravega-samples/tree/master/flink-connector-examples"},"flink-connector-examples"),"."))}s.isMDXComponent=!0},169:function(e,a,n){"use strict";n.d(a,"a",(function(){return d})),n.d(a,"b",(function(){return m}));var t=n(0),r=n.n(t);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){var a=r.a.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):c(c({},a),e)),n},d=function(e){var a=s(e.components);return r.a.createElement(p.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},b=r.a.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),b=t,m=d["".concat(i,".").concat(b)]||d[b]||u[b]||o;return n?r.a.createElement(m,c(c({ref:a},p),{},{components:n})):r.a.createElement(m,c({ref:a},p))}));function m(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var l in a)hasOwnProperty.call(a,l)&&(c[l]=a[l]);c.originalType=e,c.mdxType="string"==typeof e?e:t,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);